{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\doubl\\\\Documents\\\\Projets\\\\Try\\\\rocketbuilder\\\\frontend\\\\src\\\\components\\\\controls\\\\ManoeuvreControl.js\";\nimport React, { Component } from 'react';\nimport { ShipContext } from '../../contexts/ShipProvider';\nimport { updateShip } from '../../utils/updateShip';\nimport { deleteShip } from '../../utils/deleteShip';\nimport FromSurface from './FromSurface';\nimport FromOrbit from './FromOrbit';\nimport axios from 'axios';\nexport default class ManoeuvreControl extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      celestBodies: []\n    };\n\n    this.fromSurfaceToOrbit = async () => {\n      let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 * this.context.state.ship.celest_body.atmosphere;\n      console.log('reqDV', requierdDV);\n      let stage = this.burn(requierdDV, true);\n\n      if (stage === false) {\n        console.log('you ran out of fuel and your rocket crashed');\n      } else {\n        console.log('congrats, you reach orbit');\n      } //stage update\n\n\n      const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id);\n      this.context.shipSetStage(stage);\n      this.context.updateLocation('orbit', celest_body);\n      console.log('celest_body', celest_body); //save to database\n\n      updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.id, this.context.state.ship.id, celest_body.lowOrbit);\n    };\n\n    this.burn = (requierdDV, risk) => {\n      let stage = [...this.context.state.stage];\n      let dvByStageAfterBurn = [...this.context.state.deltaVByStage];\n      let dvbystage = [...this.context.state.deltaVByStage];\n      let dif = [];\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] > requierdDV) {\n          dvByStageAfterBurn[i] -= requierdDV;\n          requierdDV = 0;\n        } else {\n          requierdDV -= dvByStageAfterBurn[i];\n          dvByStageAfterBurn[i] = 0;\n        }\n      }\n\n      console.log('dvbystage', dvbystage);\n      console.log('dvByStageAfterBurn', dvByStageAfterBurn); // stage separation\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] === 0) {\n          stage.splice(0, 1);\n          dvByStageAfterBurn.splice(0, 1);\n          dvbystage.splice(0, 1);\n        }\n      } // getDv % diference\n\n\n      for (let i = 0; i < dvbystage.length; i++) {\n        dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100));\n      }\n\n      console.log('dif', dif); // updateFuelLastStage\n\n      if (requierdDV === 0) {\n        for (let i = 0; i < stage[0].tank.length; i++) {\n          stage[0].tank[i].remainingFuel = stage[0].tank[i].remainingFuel / 100 * dif[0] / 1.6;\n        }\n      }\n\n      if (requierdDV !== 0) {\n        if (risk === true) {\n          deleteShip(this.context.state.ship.id);\n          return false;\n        }\n      }\n\n      return stage;\n    };\n\n    this.fromOrbitToSurface = () => {\n      let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 / this.context.state.ship.celest_body.atmosphere;\n      console.log('reqDV', requierdDV);\n      let stage = this.burn(requierdDV, true);\n\n      if (stage === false) {\n        console.log('you crashed');\n      } else {\n        console.log('congrats, you landed');\n      } //stage update\n\n\n      this.context.shipSetStage(stage);\n      this.context.updateLocation('ground');\n      updateShip(stage, this.context.state.ship.name, 'ground', this.context.state.ship.celest_body.id, this.context.state.ship.id, 0);\n      console.log('manoeuvre context ', this.context);\n    };\n\n    this.commandModuleReEntry = () => {\n      let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 100;\n      console.log(requierdDV);\n    };\n\n    this.escapeFromOrbit = async () => {\n      let requierdDV = this.context.state.ship.celest_body.escapeVelocity;\n      console.log('reqDV', requierdDV);\n      let stage = this.burn(requierdDV, true);\n\n      if (stage === false) {\n        console.log('you ran out of fuel, you are lost in space');\n      } else {\n        console.log('congrats, you escaped Kerbin system influence, you are now orbiting around Kerbol');\n      } //stage update\n\n\n      const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id);\n      console.log('celest_body.childrens[0]', celest_body.childrens[0]);\n      this.context.updateLocation('orbit', celest_body.childrens[0].id);\n      this.context.shipSetStage(stage);\n      updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.childrens[0].id, this.context.state.ship.id, celest_body.apoapsis);\n    };\n\n    this.childTransfer = () => {\n      let requierdDV;\n      console.log(requierdDV);\n    };\n\n    this.planetTransfert = targetBodyPeriapsis => {\n      let requierdDV = parseInt(Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.altitudeFromParent) * Math.sqrt(Math.pow(2 * targetBodyPeriapsis, 2) / (this.context.state.ship.altitudeFromParent + targetBodyPeriapsis) - 1));\n      console.log(requierdDV);\n    };\n  }\n\n  async componentDidMount() {\n    if (this.context.state.ship.celest_body) {\n      try {\n        const celestBodyRes = await axios({\n          method: 'GET',\n          url: `http://localhost:1337/celest-bodies/`\n        });\n        const fetchedCelestBody = celestBodyRes.data;\n        this.setState({\n          celestBodies: fetchedCelestBody\n        });\n        console.log('fetchedCelestBody', fetchedCelestBody);\n      } catch (e) {\n        alert(e);\n      }\n    }\n  }\n\n  async getCelestBody(id) {\n    try {\n      const celestBodyRes = await axios({\n        method: 'GET',\n        url: `http://localhost:1337/celest-bodies/${id}`\n      });\n      const fetchedCelestBody = celestBodyRes.data;\n      return fetchedCelestBody;\n    } catch (e) {\n      alert(e);\n    }\n  }\n\n  render() {\n    if (this.context.state.ship.locationStatus === 'orbit') {\n      return /*#__PURE__*/React.createElement(ShipContext.Provider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(FromOrbit, {\n        fromOrbitToSurface: this.fromOrbitToSurface,\n        escapeFromOrbit: this.escapeFromOrbit,\n        childTransfer: this.childTransfer,\n        commandModuleReEntry: this.commandModuleReEntry,\n        planetTransfert: targetBodyPeriapsis => this.planetTransfert(targetBodyPeriapsis),\n        celestBodiesList: this.state.celestBodies,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }\n      }));\n    } else if (this.context.state.ship.locationStatus === 'ground') {\n      return /*#__PURE__*/React.createElement(ShipContext.Provider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(FromSurface, {\n        fromSurfaceToOrbit: this.fromSurfaceToOrbit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }\n      }));\n    } else {\n      return '';\n    }\n  }\n\n}\nManoeuvreControl.contextType = ShipContext;","map":{"version":3,"sources":["C:/Users/doubl/Documents/Projets/Try/rocketbuilder/frontend/src/components/controls/ManoeuvreControl.js"],"names":["React","Component","ShipContext","updateShip","deleteShip","FromSurface","FromOrbit","axios","ManoeuvreControl","state","celestBodies","fromSurfaceToOrbit","requierdDV","Math","sqrt","context","ship","celest_body","mu","radius","atmosphere","console","log","stage","burn","getCelestBody","id","shipSetStage","updateLocation","name","lowOrbit","risk","dvByStageAfterBurn","deltaVByStage","dvbystage","dif","i","length","splice","push","tank","remainingFuel","fromOrbitToSurface","commandModuleReEntry","escapeFromOrbit","escapeVelocity","childrens","apoapsis","childTransfer","planetTransfert","targetBodyPeriapsis","parseInt","altitudeFromParent","pow","componentDidMount","celestBodyRes","method","url","fetchedCelestBody","data","setState","e","alert","render","locationStatus","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,gBAAN,SAA+BP,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACpDQ,KADoD,GAC5C;AACJC,MAAAA,YAAY,EAAE;AADV,KAD4C;;AAAA,SAoBpDC,kBApBoD,GAoB/B,YAAY;AAC7B,UAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAU,KAAKC,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAAxB,CAAoCC,EAApC,GAAyC,KAAKH,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAAxB,CAAoCE,MAAvF,IAAiG,IAAjG,GAAwG,KAAKJ,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAAxB,CAAoCG,UAA7J;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBV,UAArB;AACA,UAAIW,KAAK,GAAG,KAAKC,IAAL,CAAUZ,UAAV,EAAsB,IAAtB,CAAZ;;AACA,UAAIW,KAAK,KAAK,KAAd,EAAqB;AACjBF,QAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACH,OAFD,MAEO;AACHD,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH,OAR4B,CAS7B;;;AACA,YAAML,WAAW,GAAG,MAAM,KAAKQ,aAAL,CAAmB,KAAKV,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAAxB,CAAoCS,EAAvD,CAA1B;AACA,WAAKX,OAAL,CAAaY,YAAb,CAA0BJ,KAA1B;AACA,WAAKR,OAAL,CAAaa,cAAb,CAA4B,OAA5B,EAAqCX,WAArC;AAEAI,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,WAA3B,EAd6B,CAgB7B;;AACAd,MAAAA,UAAU,CAACoB,KAAD,EAAQ,KAAKR,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBa,IAAhC,EAAsC,OAAtC,EAA+CZ,WAAW,CAACS,EAA3D,EAA+D,KAAKX,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBU,EAAvF,EAA2FT,WAAW,CAACa,QAAvG,CAAV;AACH,KAtCmD;;AAAA,SAwCpDN,IAxCoD,GAwC7C,CAACZ,UAAD,EAAamB,IAAb,KAAsB;AACzB,UAAIR,KAAK,GAAG,CAAC,GAAG,KAAKR,OAAL,CAAaN,KAAb,CAAmBc,KAAvB,CAAZ;AACA,UAAIS,kBAAkB,GAAG,CAAC,GAAG,KAAKjB,OAAL,CAAaN,KAAb,CAAmBwB,aAAvB,CAAzB;AACA,UAAIC,SAAS,GAAG,CAAC,GAAG,KAAKnB,OAAL,CAAaN,KAAb,CAAmBwB,aAAvB,CAAhB;AACA,UAAIE,GAAG,GAAG,EAAV;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,kBAAkB,CAACK,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAIJ,kBAAkB,CAACI,CAAD,CAAlB,GAAwBxB,UAA5B,EAAwC;AACpCoB,UAAAA,kBAAkB,CAACI,CAAD,CAAlB,IAAyBxB,UAAzB;AACAA,UAAAA,UAAU,GAAG,CAAb;AACH,SAHD,MAGO;AACHA,UAAAA,UAAU,IAAIoB,kBAAkB,CAACI,CAAD,CAAhC;AACAJ,UAAAA,kBAAkB,CAACI,CAAD,CAAlB,GAAwB,CAAxB;AACH;AACJ;;AACDf,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBY,SAAzB;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCU,kBAAlC,EAhByB,CAiBzB;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,kBAAkB,CAACK,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAIJ,kBAAkB,CAACI,CAAD,CAAlB,KAA0B,CAA9B,EAAiC;AAC7Bb,UAAAA,KAAK,CAACe,MAAN,CAAa,CAAb,EAAgB,CAAhB;AACAN,UAAAA,kBAAkB,CAACM,MAAnB,CAA0B,CAA1B,EAA6B,CAA7B;AACAJ,UAAAA,SAAS,CAACI,MAAV,CAAiB,CAAjB,EAAoB,CAApB;AACH;AACJ,OAxBwB,CAyBzB;;;AACA,WAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvCD,QAAAA,GAAG,CAACI,IAAJ,CAASP,kBAAkB,CAACI,CAAD,CAAlB,IAAyBF,SAAS,CAACE,CAAD,CAAT,GAAe,GAAxC,CAAT;AACH;;AACDf,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBa,GAAnB,EA7ByB,CA8BzB;;AACA,UAAIvB,UAAU,KAAK,CAAnB,EAAsB;AAClB,aAAK,IAAIwB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,KAAK,CAAC,CAAD,CAAL,CAASiB,IAAT,CAAcH,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3Cb,UAAAA,KAAK,CAAC,CAAD,CAAL,CAASiB,IAAT,CAAcJ,CAAd,EAAiBK,aAAjB,GAAkClB,KAAK,CAAC,CAAD,CAAL,CAASiB,IAAT,CAAcJ,CAAd,EAAiBK,aAAjB,GAAiC,GAAjC,GAAuCN,GAAG,CAAC,CAAD,CAA3C,GAAkD,GAAnF;AACH;AACJ;;AACD,UAAIvB,UAAU,KAAK,CAAnB,EAAsB;AAClB,YAAImB,IAAI,KAAK,IAAb,EAAmB;AACf3B,UAAAA,UAAU,CAAC,KAAKW,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBU,EAAzB,CAAV;AACA,iBAAO,KAAP;AACH;AACJ;;AACD,aAAOH,KAAP;AACH,KAnFmD;;AAAA,SAqFpDmB,kBArFoD,GAqF/B,MAAM;AACvB,UAAI9B,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAU,KAAKC,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAAxB,CAAoCC,EAApC,GAAyC,KAAKH,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAAxB,CAAoCE,MAAvF,IAAiG,IAAjG,GAAwG,KAAKJ,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAAxB,CAAoCG,UAA7J;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBV,UAArB;AACA,UAAIW,KAAK,GAAG,KAAKC,IAAL,CAAUZ,UAAV,EAAsB,IAAtB,CAAZ;;AACA,UAAIW,KAAK,KAAK,KAAd,EAAqB;AACjBF,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH,OAFD,MAEO;AACHD,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH,OARsB,CASvB;;;AACA,WAAKP,OAAL,CAAaY,YAAb,CAA0BJ,KAA1B;AACA,WAAKR,OAAL,CAAaa,cAAb,CAA4B,QAA5B;AACAzB,MAAAA,UAAU,CAACoB,KAAD,EAAQ,KAAKR,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBa,IAAhC,EAAsC,QAAtC,EAAgD,KAAKd,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAAxB,CAAoCS,EAApF,EAAwF,KAAKX,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBU,EAAhH,EAAoH,CAApH,CAAV;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,KAAKP,OAAvC;AACH,KAnGmD;;AAAA,SAqGpD4B,oBArGoD,GAqG7B,MAAM;AACzB,UAAI/B,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAU,KAAKC,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAAxB,CAAoCC,EAApC,GAAyC,KAAKH,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAAxB,CAAoCE,MAAvF,IAAiG,GAAlH;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ;AACH,KAxGmD;;AAAA,SAuHpDgC,eAvHoD,GAuHlC,YAAY;AAC1B,UAAIhC,UAAU,GAAG,KAAKG,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAAxB,CAAoC4B,cAArD;AACAxB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBV,UAArB;AACA,UAAIW,KAAK,GAAG,KAAKC,IAAL,CAAUZ,UAAV,EAAsB,IAAtB,CAAZ;;AACA,UAAIW,KAAK,KAAK,KAAd,EAAqB;AACjBF,QAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACH,OAFD,MAEO;AACHD,QAAAA,OAAO,CAACC,GAAR,CAAY,mFAAZ;AACH,OARyB,CAU1B;;;AACA,YAAML,WAAW,GAAG,MAAM,KAAKQ,aAAL,CAAmB,KAAKV,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAAxB,CAAoCS,EAAvD,CAA1B;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCL,WAAW,CAAC6B,SAAZ,CAAsB,CAAtB,CAAxC;AACA,WAAK/B,OAAL,CAAaa,cAAb,CAA4B,OAA5B,EAAqCX,WAAW,CAAC6B,SAAZ,CAAsB,CAAtB,EAAyBpB,EAA9D;AACA,WAAKX,OAAL,CAAaY,YAAb,CAA0BJ,KAA1B;AAEApB,MAAAA,UAAU,CAACoB,KAAD,EAAQ,KAAKR,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBa,IAAhC,EAAsC,OAAtC,EAA+CZ,WAAW,CAAC6B,SAAZ,CAAsB,CAAtB,EAAyBpB,EAAxE,EAA4E,KAAKX,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBU,EAApG,EAAwGT,WAAW,CAAC8B,QAApH,CAAV;AACH,KAxImD;;AAAA,SA0IpDC,aA1IoD,GA0IpC,MAAM;AAClB,UAAIpC,UAAJ;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ;AACH,KA7ImD;;AAAA,SA+IpDqC,eA/IoD,GA+IjCC,mBAAD,IAAyB;AACvC,UAAItC,UAAU,GAAGuC,QAAQ,CAACtC,IAAI,CAACC,IAAL,CAAU,KAAKC,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAAxB,CAAoCC,EAApC,GAAyC,KAAKH,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBoC,kBAA3E,IAAkGvC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACwC,GAAL,CAAS,IAAIH,mBAAb,EAAkC,CAAlC,KAAwC,KAAKnC,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBoC,kBAAxB,GAA6CF,mBAArF,IAA4G,CAAtH,CAAnG,CAAzB;AACA7B,MAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ;AACH,KAlJmD;AAAA;;AAIpD,QAAM0C,iBAAN,GAA0B;AACtB,QAAI,KAAKvC,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBC,WAA5B,EAAyC;AACrC,UAAI;AACA,cAAMsC,aAAa,GAAG,MAAMhD,KAAK,CAAC;AAC9BiD,UAAAA,MAAM,EAAE,KADsB;AAE9BC,UAAAA,GAAG,EAAG;AAFwB,SAAD,CAAjC;AAIA,cAAMC,iBAAiB,GAAGH,aAAa,CAACI,IAAxC;AACA,aAAKC,QAAL,CAAc;AAAElD,UAAAA,YAAY,EAAEgD;AAAhB,SAAd;AACArC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCoC,iBAAjC;AACH,OARD,CAQE,OAAOG,CAAP,EAAU;AACRC,QAAAA,KAAK,CAACD,CAAD,CAAL;AACH;AACJ;AACJ;;AAwFD,QAAMpC,aAAN,CAAoBC,EAApB,EAAwB;AACpB,QAAI;AACA,YAAM6B,aAAa,GAAG,MAAMhD,KAAK,CAAC;AAC9BiD,QAAAA,MAAM,EAAE,KADsB;AAE9BC,QAAAA,GAAG,EAAG,uCAAsC/B,EAAG;AAFjB,OAAD,CAAjC;AAIA,YAAMgC,iBAAiB,GAAGH,aAAa,CAACI,IAAxC;AACA,aAAOD,iBAAP;AACH,KAPD,CAOE,OAAOG,CAAP,EAAU;AACRC,MAAAA,KAAK,CAACD,CAAD,CAAL;AACH;AACJ;;AA+BDE,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKhD,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBgD,cAAxB,KAA2C,OAA/C,EAAwD;AACpD,0BAAO,oBAAC,WAAD,CAAa,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACH,oBAAC,SAAD;AACI,QAAA,kBAAkB,EAAE,KAAKtB,kBAD7B;AAEI,QAAA,eAAe,EAAE,KAAKE,eAF1B;AAGI,QAAA,aAAa,EAAE,KAAKI,aAHxB;AAII,QAAA,oBAAoB,EAAE,KAAKL,oBAJ/B;AAKI,QAAA,eAAe,EAAGO,mBAAD,IAAyB,KAAKD,eAAL,CAAqBC,mBAArB,CAL9C;AAMI,QAAA,gBAAgB,EAAE,KAAKzC,KAAL,CAAWC,YANjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADG,CAAP;AAUH,KAXD,MAWO,IAAI,KAAKK,OAAL,CAAaN,KAAb,CAAmBO,IAAnB,CAAwBgD,cAAxB,KAA2C,QAA/C,EAAyD;AAC5D,0BAAO,oBAAC,WAAD,CAAa,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACH,oBAAC,WAAD;AACI,QAAA,kBAAkB,EAAE,KAAKrD,kBAD7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADG,CAAP;AAKH,KANM,MAOF;AACD,aAAO,EAAP;AACH;AACJ;;AA1KmD;AA6KxDH,gBAAgB,CAACyD,WAAjB,GAA+B/D,WAA/B","sourcesContent":["import React, { Component } from 'react';\r\nimport { ShipContext } from '../../contexts/ShipProvider'\r\nimport { updateShip } from '../../utils/updateShip'\r\nimport { deleteShip } from '../../utils/deleteShip'\r\nimport FromSurface from './FromSurface'\r\nimport FromOrbit from './FromOrbit'\r\nimport axios from 'axios';\r\n\r\nexport default class ManoeuvreControl extends Component {\r\n    state = {\r\n        celestBodies: []\r\n    }\r\n    async componentDidMount() {\r\n        if (this.context.state.ship.celest_body) {\r\n            try {\r\n                const celestBodyRes = await axios({\r\n                    method: 'GET',\r\n                    url: `http://localhost:1337/celest-bodies/`\r\n                })\r\n                const fetchedCelestBody = celestBodyRes.data\r\n                this.setState({ celestBodies: fetchedCelestBody })\r\n                console.log('fetchedCelestBody', fetchedCelestBody);\r\n            } catch (e) {\r\n                alert(e)\r\n            }\r\n        }\r\n    }\r\n\r\n    fromSurfaceToOrbit = async () => {\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 * this.context.state.ship.celest_body.atmosphere\r\n        console.log('reqDV', requierdDV);\r\n        let stage = this.burn(requierdDV, true)\r\n        if (stage === false) {\r\n            console.log('you ran out of fuel and your rocket crashed');\r\n        } else {\r\n            console.log('congrats, you reach orbit');\r\n        }\r\n        //stage update\r\n        const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id)\r\n        this.context.shipSetStage(stage)\r\n        this.context.updateLocation('orbit', celest_body)\r\n\r\n        console.log('celest_body', celest_body);\r\n\r\n        //save to database\r\n        updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.id, this.context.state.ship.id, celest_body.lowOrbit)\r\n    }\r\n\r\n    burn = (requierdDV, risk) => {\r\n        let stage = [...this.context.state.stage]\r\n        let dvByStageAfterBurn = [...this.context.state.deltaVByStage]\r\n        let dvbystage = [...this.context.state.deltaVByStage]\r\n        let dif = []\r\n\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] > requierdDV) {\r\n                dvByStageAfterBurn[i] -= requierdDV\r\n                requierdDV = 0\r\n            } else {\r\n                requierdDV -= dvByStageAfterBurn[i]\r\n                dvByStageAfterBurn[i] = 0\r\n            }\r\n        }\r\n        console.log('dvbystage', dvbystage);\r\n        console.log('dvByStageAfterBurn', dvByStageAfterBurn);\r\n        // stage separation\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] === 0) {\r\n                stage.splice(0, 1)\r\n                dvByStageAfterBurn.splice(0, 1)\r\n                dvbystage.splice(0, 1)\r\n            }\r\n        }\r\n        // getDv % diference\r\n        for (let i = 0; i < dvbystage.length; i++) {\r\n            dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100))\r\n        }\r\n        console.log('dif', dif);\r\n        // updateFuelLastStage\r\n        if (requierdDV === 0) {\r\n            for (let i = 0; i < stage[0].tank.length; i++) {\r\n                stage[0].tank[i].remainingFuel = (stage[0].tank[i].remainingFuel / 100 * dif[0]) / 1.6\r\n            }\r\n        }\r\n        if (requierdDV !== 0) {\r\n            if (risk === true) {\r\n                deleteShip(this.context.state.ship.id)\r\n                return false\r\n            }\r\n        }\r\n        return stage\r\n    }\r\n\r\n    fromOrbitToSurface = () => {\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 / this.context.state.ship.celest_body.atmosphere\r\n        console.log('reqDV', requierdDV);\r\n        let stage = this.burn(requierdDV, true)\r\n        if (stage === false) {\r\n            console.log('you crashed');\r\n        } else {\r\n            console.log('congrats, you landed');\r\n        }\r\n        //stage update\r\n        this.context.shipSetStage(stage)\r\n        this.context.updateLocation('ground')\r\n        updateShip(stage, this.context.state.ship.name, 'ground', this.context.state.ship.celest_body.id, this.context.state.ship.id, 0)\r\n        console.log('manoeuvre context ', this.context);\r\n    }\r\n\r\n    commandModuleReEntry = () => {\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 100\r\n        console.log(requierdDV)\r\n    }\r\n\r\n    async getCelestBody(id) {\r\n        try {\r\n            const celestBodyRes = await axios({\r\n                method: 'GET',\r\n                url: `http://localhost:1337/celest-bodies/${id}`\r\n            })\r\n            const fetchedCelestBody = celestBodyRes.data\r\n            return fetchedCelestBody\r\n        } catch (e) {\r\n            alert(e)\r\n        }\r\n    }\r\n\r\n    escapeFromOrbit = async () => {\r\n        let requierdDV = this.context.state.ship.celest_body.escapeVelocity\r\n        console.log('reqDV', requierdDV);\r\n        let stage = this.burn(requierdDV, true)\r\n        if (stage === false) {\r\n            console.log('you ran out of fuel, you are lost in space');\r\n        } else {\r\n            console.log('congrats, you escaped Kerbin system influence, you are now orbiting around Kerbol');\r\n        }\r\n\r\n        //stage update\r\n        const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id)\r\n        console.log('celest_body.childrens[0]', celest_body.childrens[0]);\r\n        this.context.updateLocation('orbit', celest_body.childrens[0].id)\r\n        this.context.shipSetStage(stage)\r\n\r\n        updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.childrens[0].id, this.context.state.ship.id, celest_body.apoapsis)\r\n    }\r\n\r\n    childTransfer = () => {\r\n        let requierdDV\r\n        console.log(requierdDV)\r\n    }\r\n\r\n    planetTransfert = (targetBodyPeriapsis) => {\r\n        let requierdDV = parseInt(Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.altitudeFromParent) * (Math.sqrt(Math.pow(2 * targetBodyPeriapsis, 2) / (this.context.state.ship.altitudeFromParent + targetBodyPeriapsis) - 1)))\r\n        console.log(requierdDV);\r\n    }\r\n\r\n    render() {\r\n        if (this.context.state.ship.locationStatus === 'orbit') {\r\n            return <ShipContext.Provider>\r\n                <FromOrbit\r\n                    fromOrbitToSurface={this.fromOrbitToSurface}\r\n                    escapeFromOrbit={this.escapeFromOrbit}\r\n                    childTransfer={this.childTransfer}\r\n                    commandModuleReEntry={this.commandModuleReEntry}\r\n                    planetTransfert={(targetBodyPeriapsis) => this.planetTransfert(targetBodyPeriapsis)}\r\n                    celestBodiesList={this.state.celestBodies}\r\n                />\r\n            </ShipContext.Provider>\r\n        } else if (this.context.state.ship.locationStatus === 'ground') {\r\n            return <ShipContext.Provider>\r\n                <FromSurface\r\n                    fromSurfaceToOrbit={this.fromSurfaceToOrbit}\r\n                />\r\n            </ShipContext.Provider>\r\n        }\r\n        else {\r\n            return ''\r\n        }\r\n    }\r\n}\r\n\r\nManoeuvreControl.contextType = ShipContext;\r\n"]},"metadata":{},"sourceType":"module"}