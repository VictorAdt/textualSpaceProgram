{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\doubl\\\\Documents\\\\Projets\\\\Try\\\\rocketbuilder\\\\frontend\\\\src\\\\components\\\\controls\\\\ManoeuvreControl.js\";\nimport React, { Component } from 'react';\nimport { ShipContext } from '../../contexts/ShipProvider';\nimport { updateShip } from '../../utils/updateShip';\nimport { deleteShip } from '../../utils/deleteShip';\nimport FromSurface from './FromSurface';\nimport FromOrbit from './FromOrbit';\nexport default class ManoeuvreControl extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fromSurfaceToOrbit = () => {\n      let stage = this.context.state.stage;\n      let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 * this.context.state.ship.celest_body.atmosphere;\n      let dvByStageAfterBurn = [...this.context.state.deltaVByStage];\n      let dvbystage = [...this.context.state.deltaVByStage];\n      let dif = [];\n      console.log('reqDV', requierdDV); // Minus deltaV\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] > requierdDV) {\n          dvByStageAfterBurn[i] -= requierdDV;\n          requierdDV = 0;\n          console.log('Congratulation, you reach orbit');\n        } else {\n          requierdDV -= dvByStageAfterBurn[i];\n          dvByStageAfterBurn[i] = 0;\n        }\n      }\n\n      if (requierdDV !== 0) {\n        console.log('you crashed');\n        deleteShip(this.context.state.ship.id);\n        return;\n      }\n\n      console.log('dvbystage', dvbystage);\n      console.log('dvByStageAfterBurn', dvByStageAfterBurn); // stage separation\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] === 0) {\n          stage.splice(0, 1);\n          dvByStageAfterBurn.splice(0, 1);\n          dvbystage.splice(0, 1);\n        }\n      } // getDv % diference\n\n\n      for (let i = 0; i < dvbystage.length; i++) {\n        dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100));\n      }\n\n      console.log('dif', dif); // updateFuelLastStage\n\n      for (let i = 0; i < stage[0].tank.length; i++) {\n        stage[0].tank[i].remainingFuel = stage[0].tank[i].remainingFuel / 100 * dif[0] / 1.6;\n      } //stage update\n\n\n      this.context.shipSetStage(stage);\n      this.context.updateLocation('orbit');\n      updateShip(stage, this.context.state.ship.name, 'orbit', this.context.state.ship.celest_body.id, this.context.state.ship.id);\n      console.log('manoeuvre context ', this.context);\n    };\n\n    this.burn = (stage, dv, requierdDv) => {\n      return stage;\n    };\n\n    this.fromOrbitToSurface = () => {\n      let stage = this.context.state.stage;\n      let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 / this.context.state.ship.celest_body.atmosphere;\n      let dvByStageAfterBurn = [...this.context.state.deltaVByStage];\n      let dvbystage = [...this.context.state.deltaVByStage];\n      let dif = [];\n      console.log('reqDV', requierdDV); // Minus deltaV\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] > requierdDV) {\n          dvByStageAfterBurn[i] -= requierdDV;\n          requierdDV = 0;\n          console.log('congratulation, you landed');\n        } else {\n          requierdDV -= dvByStageAfterBurn[i];\n          dvByStageAfterBurn[i] = 0;\n        }\n      }\n\n      if (requierdDV !== 0) {\n        console.log('you crashed');\n        deleteShip(this.context.state.ship.id);\n        return;\n      }\n\n      console.log('dvbystage', dvbystage);\n      console.log('dvByStageAfterBurn', dvByStageAfterBurn); // stage separation\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] === 0) {\n          stage.splice(0, 1);\n          dvByStageAfterBurn.splice(0, 1);\n          dvbystage.splice(0, 1);\n        }\n      } // getDv % diference\n\n\n      for (let i = 0; i < dvbystage.length; i++) {\n        dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100));\n      }\n\n      console.log('dif', dif); // updateFuelLastStage\n\n      for (let i = 0; i < stage[0].tank.length; i++) {\n        stage[0].tank[i].remainingFuel = stage[0].tank[i].remainingFuel / 100 * dif[0] / 1.6;\n      } //stage update\n\n\n      this.context.shipSetStage(stage);\n      this.context.updateLocation('ground');\n      updateShip(stage, this.context.state.ship.name, 'ground', this.context.state.ship.celest_body.id, this.context.state.ship.id);\n      console.log('manoeuvre context ', this.context);\n    };\n\n    this.commandModuleReEntry = () => {\n      let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 100;\n      console.log(requierdDV);\n    };\n\n    this.escapeFromOrbit = () => {\n      // (2 * M * G / R)^0.5 \n      let requierdDV = parseInt(Math.pow(2 * this.context.state.ship.celest_body.mass * this.context.state.ship.celest_body.gravitationalConstant / this.context.state.ship.celest_body.radius, 0.5)) * 10;\n      console.log(requierdDV);\n    };\n\n    this.childTransfer = () => {};\n\n    this.planetTransfert = () => {\n      let reqTransfertDv = math.sqrt(GM / startBody.distanceFromParent) * Math.sqrt(Math.pow(2 * targetBody.distanceFromParent) / (startBody.distanceFromParent + targetBody.distanceFromParent) - 1);\n      let reqForCircular = math.sqrt(GM / targetBody.distanceFromParent) * (1 - Math.sqrt(Math.pow(2 * startBody.distanceFromParent) / (startBody.distanceFromParent + targetBody.distanceFromParent)));\n      let requierdDV = reqTransfertDv + reqForCircular;\n    };\n  }\n\n  async componentDidMount() {\n    /*try {\r\n        const celestBodyRes = await axios({\r\n            method: 'GET',\r\n            url: `http://localhost:1337/celest-bodies/${this.props.ship.celest_body.id}`\r\n        })\r\n        const fetchedCelestBody = celestBodyRes.data\r\n        console.log('fetchedCelestBody', fetchedCelestBody);\r\n    } catch(e){\r\n        alert(e)\r\n    }*/\n  }\n\n  render() {\n    if (this.context.state.ship.locationStatus === 'orbit') {\n      return /*#__PURE__*/React.createElement(ShipContext.Provider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 24\n        }\n      }, /*#__PURE__*/React.createElement(FromOrbit, {\n        fromOrbitToSurface: this.fromOrbitToSurface,\n        escapeFromOrbit: this.escapeFromOrbit,\n        childTransfer: this.childTransfer,\n        commandModuleReEntry: this.commandModuleReEntry,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }\n      }));\n    } else if (this.context.state.ship.locationStatus === 'ground') {\n      return /*#__PURE__*/React.createElement(ShipContext.Provider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 24\n        }\n      }, /*#__PURE__*/React.createElement(FromSurface, {\n        fromSurfaceToOrbit: this.fromSurfaceToOrbit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }\n      }));\n    } else {\n      return '';\n    }\n  }\n\n}\nManoeuvreControl.contextType = ShipContext;","map":{"version":3,"sources":["C:/Users/doubl/Documents/Projets/Try/rocketbuilder/frontend/src/components/controls/ManoeuvreControl.js"],"names":["React","Component","ShipContext","updateShip","deleteShip","FromSurface","FromOrbit","ManoeuvreControl","fromSurfaceToOrbit","stage","context","state","requierdDV","Math","sqrt","ship","celest_body","mu","radius","atmosphere","dvByStageAfterBurn","deltaVByStage","dvbystage","dif","console","log","i","length","id","splice","push","tank","remainingFuel","shipSetStage","updateLocation","name","burn","dv","requierdDv","fromOrbitToSurface","commandModuleReEntry","escapeFromOrbit","parseInt","pow","mass","gravitationalConstant","childTransfer","planetTransfert","reqTransfertDv","math","GM","startBody","distanceFromParent","targetBody","reqForCircular","componentDidMount","render","locationStatus","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ShipContext } from '../../contexts/ShipProvider'\r\nimport { updateShip } from '../../utils/updateShip'\r\nimport { deleteShip } from '../../utils/deleteShip'\r\nimport FromSurface from './FromSurface'\r\nimport FromOrbit from './FromOrbit'\r\n\r\nexport default class ManoeuvreControl extends Component {\r\n\r\n    async componentDidMount() {\r\n        /*try {\r\n            const celestBodyRes = await axios({\r\n                method: 'GET',\r\n                url: `http://localhost:1337/celest-bodies/${this.props.ship.celest_body.id}`\r\n            })\r\n            const fetchedCelestBody = celestBodyRes.data\r\n            console.log('fetchedCelestBody', fetchedCelestBody);\r\n        } catch(e){\r\n            alert(e)\r\n        }*/\r\n    }\r\n\r\n    fromSurfaceToOrbit = () => {\r\n        let stage = this.context.state.stage\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 * this.context.state.ship.celest_body.atmosphere\r\n        let dvByStageAfterBurn = [...this.context.state.deltaVByStage]\r\n        let dvbystage = [...this.context.state.deltaVByStage]\r\n        let dif = []\r\n        console.log('reqDV', requierdDV);\r\n        // Minus deltaV\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] > requierdDV) {\r\n                dvByStageAfterBurn[i] -= requierdDV\r\n                requierdDV = 0\r\n                console.log('Congratulation, you reach orbit')\r\n            } else {\r\n                requierdDV -= dvByStageAfterBurn[i]\r\n                dvByStageAfterBurn[i] = 0\r\n            }\r\n        }\r\n        if (requierdDV !== 0) {\r\n            console.log('you crashed')\r\n            deleteShip(this.context.state.ship.id)\r\n            return\r\n        }\r\n        console.log('dvbystage', dvbystage);\r\n        console.log('dvByStageAfterBurn', dvByStageAfterBurn);\r\n        // stage separation\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] === 0) {\r\n                stage.splice(0, 1)\r\n                dvByStageAfterBurn.splice(0, 1)\r\n                dvbystage.splice(0, 1)\r\n            }\r\n        }\r\n        // getDv % diference\r\n        for (let i = 0; i < dvbystage.length; i++) {\r\n            dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100))\r\n        }\r\n        console.log('dif', dif);\r\n        // updateFuelLastStage\r\n        for (let i = 0; i < stage[0].tank.length; i++) {\r\n            stage[0].tank[i].remainingFuel = (stage[0].tank[i].remainingFuel / 100 * dif[0]) / 1.6\r\n        }\r\n        //stage update\r\n        this.context.shipSetStage(stage)\r\n        this.context.updateLocation('orbit')\r\n        updateShip(stage, this.context.state.ship.name, 'orbit', this.context.state.ship.celest_body.id, this.context.state.ship.id)\r\n        console.log('manoeuvre context ', this.context);\r\n    }\r\n\r\n    burn = (stage, dv , requierdDv) => {\r\n\r\n        return stage\r\n    }\r\n\r\n    fromOrbitToSurface = () => {\r\n        let stage = this.context.state.stage\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 / this.context.state.ship.celest_body.atmosphere\r\n        let dvByStageAfterBurn = [...this.context.state.deltaVByStage]\r\n        let dvbystage = [...this.context.state.deltaVByStage]\r\n        let dif = []\r\n        console.log('reqDV', requierdDV);\r\n        // Minus deltaV\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] > requierdDV) {\r\n                dvByStageAfterBurn[i] -= requierdDV\r\n                requierdDV = 0\r\n                console.log('congratulation, you landed')\r\n            } else {\r\n                requierdDV -= dvByStageAfterBurn[i]\r\n                dvByStageAfterBurn[i] = 0\r\n            }\r\n        }\r\n        if (requierdDV !== 0) {\r\n            console.log('you crashed')\r\n            deleteShip(this.context.state.ship.id)\r\n            return\r\n        }\r\n        console.log('dvbystage', dvbystage);\r\n        console.log('dvByStageAfterBurn', dvByStageAfterBurn);\r\n        // stage separation\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] === 0) {\r\n                stage.splice(0, 1)\r\n                dvByStageAfterBurn.splice(0, 1)\r\n                dvbystage.splice(0, 1)\r\n            }\r\n        }\r\n        // getDv % diference\r\n        for (let i = 0; i < dvbystage.length; i++) {\r\n            dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100))\r\n        }\r\n        console.log('dif', dif);\r\n        // updateFuelLastStage\r\n        for (let i = 0; i < stage[0].tank.length; i++) {\r\n            stage[0].tank[i].remainingFuel = (stage[0].tank[i].remainingFuel / 100 * dif[0]) / 1.6\r\n        }\r\n        //stage update\r\n        this.context.shipSetStage(stage)\r\n        this.context.updateLocation('ground')\r\n        updateShip(stage, this.context.state.ship.name, 'ground', this.context.state.ship.celest_body.id, this.context.state.ship.id)\r\n        console.log('manoeuvre context ', this.context);\r\n    }\r\n\r\n    commandModuleReEntry = () => {\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 100 \r\n        console.log(requierdDV);\r\n    }\r\n    \r\n    escapeFromOrbit = () => {\r\n        // (2 * M * G / R)^0.5 \r\n        let requierdDV = parseInt(Math.pow(\r\n            (2 * this.context.state.ship.celest_body.mass \r\n                * this.context.state.ship.celest_body.gravitationalConstant \r\n                / this.context.state.ship.celest_body.radius), 0.5\r\n                )) * 10\r\n\r\n        console.log(requierdDV);\r\n    }\r\n\r\n    childTransfer = () => {\r\n\r\n    }\r\n\r\n    planetTransfert = () => {\r\n        let reqTransfertDv = math.sqrt(GM / startBody.distanceFromParent) * (Math.sqrt(Math.pow(2* targetBody.distanceFromParent) / (startBody.distanceFromParent + targetBody.distanceFromParent) -1 ))\r\n        let reqForCircular = math.sqrt(GM / targetBody.distanceFromParent) * (1 - Math.sqrt(Math.pow(2* startBody.distanceFromParent) / (startBody.distanceFromParent + targetBody.distanceFromParent)))\r\n        let requierdDV = reqTransfertDv + reqForCircular\r\n    }\r\n\r\n    render() {\r\n            if (this.context.state.ship.locationStatus === 'orbit') {\r\n                return <ShipContext.Provider>\r\n                        <FromOrbit\r\n                            fromOrbitToSurface={this.fromOrbitToSurface}\r\n                            escapeFromOrbit={this.escapeFromOrbit}\r\n                            childTransfer={this.childTransfer}\r\n                            commandModuleReEntry={this.commandModuleReEntry}\r\n                        />\r\n                    </ShipContext.Provider>\r\n            } else if (this.context.state.ship.locationStatus === 'ground') {\r\n                return <ShipContext.Provider>\r\n                        <FromSurface\r\n                            fromSurfaceToOrbit={this.fromSurfaceToOrbit}\r\n                        />\r\n                     </ShipContext.Provider>\r\n            }else {\r\n                return ''\r\n            }\r\n    }\r\n}\r\n\r\nManoeuvreControl.contextType = ShipContext;\r\n"]},"metadata":{},"sourceType":"module"}