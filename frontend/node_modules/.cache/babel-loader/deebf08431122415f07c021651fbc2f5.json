{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\doubl\\\\Documents\\\\Projets\\\\Try\\\\rocketbuilder\\\\frontend\\\\src\\\\contexts\\\\ShipProvider.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nexport const ShipContext = React.createContext();\nexport class ShipProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ship: {},\n      ispArray: [],\n      fuelMassArray: [],\n      totalMassArray: [],\n      deltaV: 0,\n      deltaVByStage: [],\n      totalMass: 0,\n      stage: [{\n        commandModule: [],\n        engine: [],\n        tank: []\n      }]\n    };\n\n    this.getStats = () => {\n      this.getMass();\n    };\n\n    this.setStage = stage => {\n      this.setState({\n        stage: stage\n      }, () => {\n        this.getMass();\n      });\n    };\n\n    this.setShip = ship => {\n      this.setState({\n        ship: ship\n      });\n    };\n\n    this.getIsp = () => {\n      let ispArray = [];\n      let stage = this.state.stage;\n\n      for (let i = 0; i < stage.length; i++) {\n        if (stage[i].engine.length > 0) {\n          let currentStage = i;\n          let currentStageISP = [];\n\n          for (let i = 0; i < stage[currentStage].engine.length; i++) {\n            currentStageISP.push(stage[currentStage].engine[i].isp);\n          }\n\n          ispArray.push(currentStageISP.reduce((a, b) => a + b, 0) / currentStageISP.length);\n          currentStage++;\n        } else {\n          ispArray.push(0);\n        }\n      }\n\n      this.setState({\n        ispArray: ispArray\n      }, () => {\n        this.getMassSumOfStages();\n      });\n    };\n\n    this.getFuelMass = () => {\n      let fuelMassArray = [];\n      let stage = this.state.stage;\n\n      for (let i = 0; i < stage.length; i++) {\n        if (stage[i].tank.length > 0) {\n          let currentStage = i;\n          let currentfuelMass = [];\n\n          for (let i = 0; i < stage[currentStage].tank.length; i++) {\n            currentfuelMass.push(stage[currentStage].tank[i].remainingFuel * 0.01);\n          }\n\n          fuelMassArray.push(currentfuelMass.reduce((a, b) => a + b, 0));\n          currentStage++;\n        } else {\n          fuelMassArray.push(0);\n        }\n      }\n\n      this.setState({\n        fuelMassArray: fuelMassArray\n      }, () => {\n        this.getIsp();\n      });\n    };\n\n    this.getMass = () => {\n      let totalMassArray = [];\n      let stage = this.state.stage;\n\n      for (let i = 0; i < stage.length; i++) {\n        let currentStage = i;\n        let currentMass = [];\n\n        if (stage[currentStage].tank !== undefined || stage[currentStage].engine !== undefined || stage[currentStage].commandModule !== undefined) {\n          for (let i = 0; i < stage[currentStage].tank.length; i++) {\n            if (stage[currentStage].tank[i] !== undefined) {\n              currentMass.push(parseInt(stage[currentStage].tank[i].remainingFuel * 0.01));\n              currentMass.push(parseInt(stage[currentStage].tank[i].emptyWeight));\n            }\n          }\n\n          for (let i = 0; i < stage[currentStage].engine.length; i++) {\n            if (stage[currentStage].engine[i] !== undefined) {\n              currentMass.push(parseInt(stage[currentStage].engine[i].weight));\n            }\n          }\n\n          for (let i = 0; i < stage[currentStage].commandModule.length; i++) {\n            if (stage[currentStage].commandModule[i] !== undefined) {\n              currentMass.push(parseInt(stage[currentStage].commandModule[i].weight));\n            }\n          }\n\n          totalMassArray.push(parseInt(currentMass.reduce((a, b) => a + b, 0)));\n          currentStage++;\n        } else {\n          totalMassArray.push(0);\n        }\n      }\n\n      this.setState({\n        totalMassArray: totalMassArray,\n        totalMass: totalMassArray.reduce((a, b) => a + b, 0)\n      }, () => {\n        this.getFuelMass();\n        this.getMaxFuelByStage();\n      });\n    };\n\n    this.getMassSumOfStages = () => {\n      let massSum = [];\n      let massArr = this.state.totalMassArray;\n      let i = 0;\n\n      while (i < massArr.length) {\n        let total = massArr.reduce((a, b) => a + b, 0);\n        massSum.push(total);\n        massArr.splice(i, 1, 0);\n        i++;\n      }\n\n      this.setState({\n        massSum: massSum\n      }, () => {\n        this.getDeltaVByStage();\n      });\n    };\n\n    this.getDeltaVByStage = () => {\n      let deltaVByStage = [];\n      let summArr = this.state.massSum;\n\n      for (let i = 0; i < summArr.length; i++) {\n        let isp = this.state.ispArray;\n        let fuelMassArray = this.state.fuelMassArray;\n        let dryMass = summArr[i] - fuelMassArray[i];\n        let deltaV = isp[i] * 9.82 * Math.log(summArr[i] / dryMass);\n\n        if (!isNaN(deltaV)) {\n          deltaVByStage.push(deltaV);\n          this.setState({\n            deltaV: deltaVByStage.reduce((a, b) => a + b, 0)\n          });\n        } else {\n          deltaVByStage.push(0);\n        }\n      }\n\n      this.setState({\n        deltaVByStage: deltaVByStage\n      }, () => {\n        console.log('ShipProvider this.state', this.state);\n      });\n    };\n\n    this.getMaxFuelByStage = () => {\n      let maxFuelMassArray = [];\n      let stage = this.state.stage;\n\n      for (let i = 0; i < stage.length; i++) {\n        if (stage[i].tank.length > 0) {\n          let currentStage = i;\n          let currentMaxFuel = [];\n\n          for (let i = 0; i < stage[currentStage].tank.length; i++) {\n            currentMaxFuel.push(stage[currentStage].tank[i].maxFuel);\n          }\n\n          maxFuelMassArray.push(currentMaxFuel.reduce((a, b) => a + b, 0));\n          currentStage++;\n        } else {\n          maxFuelMassArray.push(0);\n        }\n      }\n\n      this.setState({\n        maxFuelMassArray: maxFuelMassArray\n      }, () => {\n        console.log('this.state.maxFuelMassArray', this.state.maxFuelMassArray);\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log('ShipProvider compenentdidMount ship', this.state);\n  }\n\n  /* getFuelForDV = dv => {\r\n      this.getMaxFuelByStage()\r\n      let summArr = this.state.massSum\r\n      let fuelMassArray = this.state.fuelMassArray\r\n      let dryMass = (summArr[0] - fuelMassArray[0])\r\n      let wetMass = dryMass * Math.exp(dv / (9.82 * this.state.ispArray[0]))\r\n      let fuelWeight = wetMass - dryMass\r\n      let fuelAmount = fuelWeight * 100\r\n      console.log('fuelAmount', fuelAmount);\r\n      return fuelAmount\r\n  }*/\n  async updateLocation(status, celest_body) {\n    let ship = this.state.ship;\n    console.log('param', celest_body, status);\n    ship.locationStatus = status;\n    this.setState({\n      ship: ship\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ShipContext.Provider, {\n      value: {\n        state: this.state,\n        shipSetStage: stage => this.setStage(stage),\n        getStats: () => this.getStats(),\n        getFuelForDV: dv => this.getFuelForDV(dv),\n        setShip: ship => this.setShip(ship),\n        updateLocation: status => this.updateLocation(status)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/doubl/Documents/Projets/Try/rocketbuilder/frontend/src/contexts/ShipProvider.js"],"names":["React","Component","axios","ShipContext","createContext","ShipProvider","state","ship","ispArray","fuelMassArray","totalMassArray","deltaV","deltaVByStage","totalMass","stage","commandModule","engine","tank","getStats","getMass","setStage","setState","setShip","getIsp","i","length","currentStage","currentStageISP","push","isp","reduce","a","b","getMassSumOfStages","getFuelMass","currentfuelMass","remainingFuel","currentMass","undefined","parseInt","emptyWeight","weight","getMaxFuelByStage","massSum","massArr","total","splice","getDeltaVByStage","summArr","dryMass","Math","log","isNaN","console","maxFuelMassArray","currentMaxFuel","maxFuel","componentDidMount","updateLocation","status","celest_body","locationStatus","render","shipSetStage","getFuelForDV","dv","props","children"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const ShipContext = React.createContext()\r\n\r\nexport class ShipProvider extends Component {\r\n    state = {\r\n        ship: {},\r\n        ispArray: [],\r\n        fuelMassArray: [],\r\n        totalMassArray: [],\r\n        deltaV: 0,\r\n        deltaVByStage: [],\r\n        totalMass: 0,\r\n        stage: [{\r\n            commandModule: [],\r\n            engine: [],\r\n            tank: [],\r\n        }],\r\n    }\r\n\r\n    getStats = () => {\r\n        this.getMass();\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('ShipProvider compenentdidMount ship', this.state);\r\n    }\r\n\r\n    setStage = stage => {\r\n        this.setState({ stage: stage }, () => {\r\n            this.getMass()\r\n        })\r\n    }\r\n\r\n    setShip = ship => {\r\n        this.setState({ ship: ship })\r\n    }\r\n\r\n    getIsp = () => {\r\n        let ispArray = []\r\n        let stage = this.state.stage\r\n\r\n        for (let i = 0; i < stage.length; i++) {\r\n            if (stage[i].engine.length > 0) {\r\n                let currentStage = i\r\n                let currentStageISP = []\r\n                for (let i = 0; i < stage[currentStage].engine.length; i++) {\r\n                    currentStageISP.push(stage[currentStage].engine[i].isp)\r\n                }\r\n                ispArray.push(currentStageISP.reduce((a, b) => a + b, 0) / currentStageISP.length)\r\n                currentStage++\r\n            }\r\n            else {\r\n                ispArray.push(0)\r\n            }\r\n        }\r\n        this.setState({ ispArray: ispArray }, () => {\r\n            this.getMassSumOfStages()\r\n        })\r\n    }\r\n\r\n    getFuelMass = () => {\r\n        let fuelMassArray = []\r\n        let stage = this.state.stage\r\n\r\n        for (let i = 0; i < stage.length; i++) {\r\n            if (stage[i].tank.length > 0) {\r\n                let currentStage = i\r\n                let currentfuelMass = []\r\n                for (let i = 0; i < stage[currentStage].tank.length; i++) {\r\n                    currentfuelMass.push(stage[currentStage].tank[i].remainingFuel * 0.01)\r\n                }\r\n                fuelMassArray.push(currentfuelMass.reduce((a, b) => a + b, 0))\r\n                currentStage++\r\n            }\r\n            else {\r\n                fuelMassArray.push(0)\r\n            }\r\n        }\r\n        this.setState({ fuelMassArray: fuelMassArray }, () => {\r\n            this.getIsp()\r\n        })\r\n    }\r\n\r\n    getMass = () => {\r\n        let totalMassArray = []\r\n        let stage = this.state.stage\r\n\r\n        for (let i = 0; i < stage.length; i++) {\r\n            let currentStage = i\r\n            let currentMass = []\r\n            if (stage[currentStage].tank !== undefined || stage[currentStage].engine !== undefined || stage[currentStage].commandModule !== undefined) {\r\n                for (let i = 0; i < stage[currentStage].tank.length; i++) {\r\n                    if (stage[currentStage].tank[i] !== undefined) {\r\n                        currentMass.push(parseInt(stage[currentStage].tank[i].remainingFuel * 0.01))\r\n                        currentMass.push(parseInt(stage[currentStage].tank[i].emptyWeight))\r\n                    }\r\n                }\r\n                for (let i = 0; i < stage[currentStage].engine.length; i++) {\r\n                    if (stage[currentStage].engine[i] !== undefined) {\r\n                        currentMass.push(parseInt(stage[currentStage].engine[i].weight))\r\n                    }\r\n                }\r\n                for (let i = 0; i < stage[currentStage].commandModule.length; i++) {\r\n                    if (stage[currentStage].commandModule[i] !== undefined) {\r\n                        currentMass.push(parseInt(stage[currentStage].commandModule[i].weight))\r\n                    }\r\n                }\r\n                totalMassArray.push(parseInt(currentMass.reduce((a, b) => a + b, 0)))\r\n                currentStage++\r\n            } else {\r\n                totalMassArray.push(0)\r\n            }\r\n        }\r\n        this.setState({ totalMassArray: totalMassArray, totalMass: totalMassArray.reduce((a, b) => a + b, 0) }, () => {\r\n            this.getFuelMass()\r\n            this.getMaxFuelByStage()\r\n        })\r\n\r\n    }\r\n\r\n    getMassSumOfStages = () => {\r\n        let massSum = []\r\n        let massArr = this.state.totalMassArray\r\n        let i = 0;\r\n        while (i < massArr.length) {\r\n            let total = massArr.reduce((a, b) => a + b, 0)\r\n            massSum.push(total)\r\n            massArr.splice(i, 1, 0)\r\n            i++\r\n        }\r\n        this.setState({ massSum: massSum }, () => {\r\n            this.getDeltaVByStage()\r\n        })\r\n    }\r\n\r\n    getDeltaVByStage = () => {\r\n        let deltaVByStage = []\r\n        let summArr = this.state.massSum\r\n\r\n        for (let i = 0; i < summArr.length; i++) {\r\n            let isp = this.state.ispArray\r\n            let fuelMassArray = this.state.fuelMassArray\r\n            let dryMass = (summArr[i] - fuelMassArray[i])\r\n            let deltaV = isp[i] * 9.82 * Math.log(summArr[i] / dryMass)\r\n            if (!isNaN(deltaV)) {\r\n                deltaVByStage.push(deltaV)\r\n                this.setState({ deltaV: deltaVByStage.reduce((a, b) => a + b, 0) })\r\n            } else {\r\n                deltaVByStage.push(0)\r\n            }\r\n        }\r\n        this.setState({ deltaVByStage: deltaVByStage }, () => {\r\n            console.log('ShipProvider this.state', this.state);\r\n        })\r\n    }\r\n\r\n    getMaxFuelByStage = () => {\r\n        let maxFuelMassArray = []\r\n        let stage = this.state.stage\r\n\r\n        for (let i = 0; i < stage.length; i++) {\r\n            if (stage[i].tank.length > 0) {\r\n                let currentStage = i\r\n                let currentMaxFuel = []\r\n                for (let i = 0; i < stage[currentStage].tank.length; i++) {\r\n                    currentMaxFuel.push(stage[currentStage].tank[i].maxFuel)\r\n                }\r\n                maxFuelMassArray.push(currentMaxFuel.reduce((a, b) => a + b, 0))\r\n                currentStage++\r\n            }\r\n            else {\r\n                maxFuelMassArray.push(0)\r\n            }\r\n        }\r\n        this.setState({ maxFuelMassArray: maxFuelMassArray }, () => {\r\n            console.log('this.state.maxFuelMassArray', this.state.maxFuelMassArray);\r\n        })\r\n    }\r\n\r\n    /* getFuelForDV = dv => {\r\n        this.getMaxFuelByStage()\r\n        let summArr = this.state.massSum\r\n        let fuelMassArray = this.state.fuelMassArray\r\n        let dryMass = (summArr[0] - fuelMassArray[0])\r\n        let wetMass = dryMass * Math.exp(dv / (9.82 * this.state.ispArray[0]))\r\n        let fuelWeight = wetMass - dryMass\r\n        let fuelAmount = fuelWeight * 100\r\n        console.log('fuelAmount', fuelAmount);\r\n        return fuelAmount\r\n    }*/\r\n\r\n    async updateLocation(status, celest_body) {\r\n        let ship = this.state.ship\r\n        console.log('param', celest_body, status);\r\n        ship.locationStatus = status\r\n        this.setState({ ship: ship })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <ShipContext.Provider value={{\r\n                state: this.state,\r\n                shipSetStage: stage => this.setStage(stage),\r\n                getStats: () => this.getStats(),\r\n                getFuelForDV: dv => this.getFuelForDV(dv),\r\n                setShip: ship => this.setShip(ship),\r\n                updateLocation: status => this.updateLocation(status)\r\n            }}>\r\n                {this.props.children}\r\n            </ShipContext.Provider>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}