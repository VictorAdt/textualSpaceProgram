{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\doubl\\\\Documents\\\\Projets\\\\Try\\\\rocketbuilder\\\\frontend\\\\src\\\\contexts\\\\ShipProvider.js\";\nimport React, { Component } from 'react';\nexport const ShipContext = React.createContext();\nexport class ShipProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ispArray: [],\n      fuelMassArray: [],\n      totalMassArray: [],\n      deltaV: 0,\n      deltaVByStage: [],\n      totalMass: 0,\n      location: 'VAB',\n      stage: [{\n        commandModule: [],\n        engine: [],\n        tank: []\n      }]\n    };\n\n    this.getStats = () => {\n      this.getMass();\n    };\n\n    this.setStage = stage => {\n      this.setState({\n        stage: stage\n      }, () => {\n        this.getMass();\n      }, console.log('ShipProvider stage', this.state.stage));\n    };\n\n    this.getIsp = () => {\n      let ispArray = [];\n      let stage = this.state.stage;\n\n      for (let i = 0; i < stage.length; i++) {\n        if (stage[i].engine.length > 0) {\n          let currentStage = i;\n          let currentStageISP = [];\n\n          for (let i = 0; i < stage[currentStage].engine.length; i++) {\n            currentStageISP.push(stage[currentStage].engine[i].isp);\n          }\n\n          ispArray.push(currentStageISP.reduce((a, b) => a + b, 0) / currentStageISP.length);\n          currentStage++;\n        } else {\n          ispArray.push(0);\n        }\n      }\n\n      this.setState({\n        ispArray: ispArray\n      }, () => {\n        this.getMassSumOfStages();\n        console.log('ShipProvider ispArray', ispArray);\n      });\n    };\n\n    this.getFuelMass = () => {\n      let fuelMassArray = [];\n      let stage = this.state.stage;\n\n      for (let i = 0; i < stage.length; i++) {\n        if (stage[i].tank.length > 0) {\n          let currentStage = i;\n          let currentfuelMass = [];\n\n          for (let i = 0; i < stage[currentStage].tank.length; i++) {\n            currentfuelMass.push(stage[currentStage].tank[i].remainingFuel * 0.01);\n          }\n\n          fuelMassArray.push(currentfuelMass.reduce((a, b) => a + b, 0));\n          currentStage++;\n        } else {\n          fuelMassArray.push(0);\n        }\n      }\n\n      this.setState({\n        fuelMassArray: fuelMassArray\n      }, () => {\n        console.log('ShipProvider fuelMassArray', fuelMassArray);\n        this.getIsp();\n      });\n    };\n\n    this.getMass = () => {\n      let totalMassArray = [];\n      let stage = this.state.stage;\n\n      for (let i = 0; i < stage.length; i++) {\n        let currentStage = i;\n        let currentMass = [];\n\n        if (stage[currentStage].tank !== undefined || stage[currentStage].engine !== undefined || stage[currentStage].commandModule !== undefined) {\n          for (let i = 0; i < stage[currentStage].tank.length; i++) {\n            if (stage[currentStage].tank[i] !== undefined) {\n              currentMass.push(parseInt(stage[currentStage].tank[i].remainingFuel * 0.01));\n              currentMass.push(parseInt(stage[currentStage].tank[i].emptyWeight));\n            }\n          }\n\n          for (let i = 0; i < stage[currentStage].engine.length; i++) {\n            if (stage[currentStage].engine[i] !== undefined) {\n              currentMass.push(parseInt(stage[currentStage].engine[i].weight));\n            }\n          }\n\n          for (let i = 0; i < stage[currentStage].commandModule.length; i++) {\n            if (stage[currentStage].commandModule[i] !== undefined) {\n              currentMass.push(parseInt(stage[currentStage].commandModule[i].weight));\n            }\n          }\n\n          totalMassArray.push(parseInt(currentMass.reduce((a, b) => a + b, 0)));\n          currentStage++;\n        } else {\n          totalMassArray.push(0);\n        }\n      }\n\n      this.setState({\n        totalMassArray: totalMassArray,\n        totalMass: totalMassArray.reduce((a, b) => a + b, 0)\n      }, () => {\n        console.log('ShipProvider totalMassArray', this.state.totalMassArray);\n        console.log('ShipProvider totalMass', this.state.totalMass);\n        this.getFuelMass();\n        this.getMaxFuelByStage();\n      });\n    };\n\n    this.getMassSumOfStages = () => {\n      let massSum = [];\n      let massArr = this.state.totalMassArray;\n      let i = 0;\n\n      while (i < massArr.length) {\n        let total = massArr.reduce((a, b) => a + b, 0);\n        massSum.push(total);\n        massArr.splice(i, 1, 0);\n        i++;\n      }\n\n      this.setState({\n        massSum: massSum\n      }, () => {\n        console.log('ShipProvider massSum', this.state.massSum);\n        this.getDeltaVByStage();\n      });\n    };\n\n    this.getDeltaVByStage = () => {\n      let deltaVByStage = [];\n      let summArr = this.state.massSum;\n\n      for (let i = 0; i < summArr.length; i++) {\n        let isp = this.state.ispArray;\n        let fuelMassArray = this.state.fuelMassArray;\n        let dryMass = summArr[i] - fuelMassArray[i];\n        let deltaV = isp[i] * 9.82 * Math.log(summArr[i] / dryMass);\n        console.log('ShipProvider getDeltaVByStage', isp[i], summArr[i], dryMass);\n\n        if (!isNaN(deltaV)) {\n          deltaVByStage.push(deltaV);\n          this.setState({\n            deltaV: deltaVByStage.reduce((a, b) => a + b, 0)\n          });\n        } else {\n          deltaVByStage.push(0);\n        }\n      }\n\n      this.setState({\n        deltaVByStage: deltaVByStage\n      }, () => {\n        console.log('ShipProvider summArr', summArr);\n        console.log('ShipProvider deltaVByStage', deltaVByStage);\n        console.log('ShipProvider Ship', this.state);\n      });\n    };\n\n    this.getMaxFuelByStage = () => {\n      let maxFuelMassArray = [];\n      let stage = this.state.stage;\n\n      for (let i = 0; i < stage.length; i++) {\n        if (stage[i].tank.length > 0) {\n          let currentStage = i;\n          let currentMaxFuel = [];\n\n          for (let i = 0; i < stage[currentStage].tank.length; i++) {\n            currentMaxFuel.push(stage[currentStage].tank[i].maxFuel);\n          }\n\n          maxFuelMassArray.push(currentMaxFuel.reduce((a, b) => a + b, 0));\n          currentStage++;\n        } else {\n          maxFuelMassArray.push(0);\n        }\n      }\n\n      this.setState({\n        maxFuelMassArray: maxFuelMassArray\n      }, () => {\n        console.log('ShipProvider maxFuelMassArray', maxFuelMassArray);\n      });\n    };\n\n    this.getFuelForDV = dv => {\n      this.getMaxFuelByStage();\n      let summArr = this.state.massSum;\n      let maxFuelMassArray = this.state.maxFuelMassArray;\n\n      for (let i = 0; i < this.state.stage.length;) {\n        let fuelMassArray = this.state.fuelMassArray;\n        let dryMass = summArr[i] - fuelMassArray[i];\n        let fuelWeight = dryMass * Math.exp(dv / (9.82 * this.state.ispArray[i]));\n        let fuelAmount = fuelWeight * 0.01;\n\n        if (fuelAmount < maxFuelMassArray[i]) {\n          return fuelAmount;\n        } else {\n          i++;\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    console.log('ShipProvider compenentdidMount ship', this.state);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ShipContext.Provider, {\n      value: {\n        state: this.state,\n        shipSetStage: stage => this.setStage(stage),\n        getStats: () => this.getStats(),\n        getFuelForDV: dv => this.getFuelForDV(dv)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/doubl/Documents/Projets/Try/rocketbuilder/frontend/src/contexts/ShipProvider.js"],"names":["React","Component","ShipContext","createContext","ShipProvider","state","ispArray","fuelMassArray","totalMassArray","deltaV","deltaVByStage","totalMass","location","stage","commandModule","engine","tank","getStats","getMass","setStage","setState","console","log","getIsp","i","length","currentStage","currentStageISP","push","isp","reduce","a","b","getMassSumOfStages","getFuelMass","currentfuelMass","remainingFuel","currentMass","undefined","parseInt","emptyWeight","weight","getMaxFuelByStage","massSum","massArr","total","splice","getDeltaVByStage","summArr","dryMass","Math","isNaN","maxFuelMassArray","currentMaxFuel","maxFuel","getFuelForDV","dv","fuelWeight","exp","fuelAmount","componentDidMount","render","shipSetStage","props","children"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport const ShipContext = React.createContext()\r\n\r\nexport class ShipProvider extends Component {\r\n    state = {\r\n        ispArray: [],\r\n        fuelMassArray: [],\r\n        totalMassArray: [],\r\n        deltaV: 0,\r\n        deltaVByStage: [],\r\n        totalMass: 0,\r\n        location: 'VAB',\r\n        stage: [{\r\n            commandModule: [],\r\n            engine: [],\r\n            tank: [],\r\n        }],\r\n    }\r\n\r\n    getStats = () => {\r\n        this.getMass();\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        console.log('ShipProvider compenentdidMount ship', this.state);\r\n    }\r\n\r\n    setStage = stage => {\r\n        this.setState({ stage: stage }, () => {\r\n            this.getMass()\r\n        }, console.log('ShipProvider stage', this.state.stage))\r\n    }\r\n\r\n\r\n    getIsp = () => {\r\n        let ispArray = []\r\n        let stage = this.state.stage\r\n\r\n        for (let i = 0; i < stage.length; i++) {\r\n            if (stage[i].engine.length > 0) {\r\n                let currentStage = i\r\n                let currentStageISP = []\r\n                for (let i = 0; i < stage[currentStage].engine.length; i++) {\r\n                    currentStageISP.push(stage[currentStage].engine[i].isp)\r\n                }\r\n                ispArray.push(currentStageISP.reduce((a, b) => a + b, 0) / currentStageISP.length)\r\n                currentStage++\r\n            }\r\n            else {\r\n                ispArray.push(0)\r\n            }\r\n        }\r\n        this.setState({ ispArray: ispArray }, () => {\r\n            this.getMassSumOfStages()\r\n            console.log('ShipProvider ispArray', ispArray)\r\n        })\r\n    }\r\n\r\n    getFuelMass = () => {\r\n        let fuelMassArray = []\r\n        let stage = this.state.stage\r\n\r\n        for (let i = 0; i < stage.length; i++) {\r\n            if (stage[i].tank.length > 0) {\r\n                let currentStage = i\r\n                let currentfuelMass = []\r\n                for (let i = 0; i < stage[currentStage].tank.length; i++) {\r\n                    currentfuelMass.push(stage[currentStage].tank[i].remainingFuel * 0.01)\r\n                }\r\n                fuelMassArray.push(currentfuelMass.reduce((a, b) => a + b, 0))\r\n                currentStage++\r\n            }\r\n            else {\r\n                fuelMassArray.push(0)\r\n            }\r\n        }\r\n        this.setState({ fuelMassArray: fuelMassArray }, () => {\r\n            console.log('ShipProvider fuelMassArray', fuelMassArray)\r\n            this.getIsp()\r\n        })\r\n    }\r\n\r\n    getMass = () => {\r\n        let totalMassArray = []\r\n        let stage = this.state.stage\r\n\r\n        for (let i = 0; i < stage.length; i++) {\r\n            let currentStage = i\r\n            let currentMass = []\r\n            if (stage[currentStage].tank !== undefined || stage[currentStage].engine !== undefined || stage[currentStage].commandModule !== undefined) {\r\n                for (let i = 0; i < stage[currentStage].tank.length; i++) {\r\n                    if (stage[currentStage].tank[i] !== undefined) {\r\n                        currentMass.push(parseInt(stage[currentStage].tank[i].remainingFuel * 0.01))\r\n                        currentMass.push(parseInt(stage[currentStage].tank[i].emptyWeight))\r\n                    }\r\n                }\r\n                for (let i = 0; i < stage[currentStage].engine.length; i++) {\r\n                    if (stage[currentStage].engine[i] !== undefined) {\r\n                        currentMass.push(parseInt(stage[currentStage].engine[i].weight))\r\n                    }\r\n                }\r\n                for (let i = 0; i < stage[currentStage].commandModule.length; i++) {\r\n                    if (stage[currentStage].commandModule[i] !== undefined) {\r\n                        currentMass.push(parseInt(stage[currentStage].commandModule[i].weight))\r\n                    }\r\n                }\r\n                totalMassArray.push(parseInt(currentMass.reduce((a, b) => a + b, 0)))\r\n                currentStage++\r\n            } else {\r\n                totalMassArray.push(0)\r\n            }\r\n        }\r\n        this.setState({ totalMassArray: totalMassArray, totalMass: totalMassArray.reduce((a, b) => a + b, 0) }, () => {\r\n            console.log('ShipProvider totalMassArray', this.state.totalMassArray)\r\n            console.log('ShipProvider totalMass', this.state.totalMass)\r\n            this.getFuelMass()\r\n            this.getMaxFuelByStage()\r\n        })\r\n\r\n    }\r\n\r\n    getMassSumOfStages = () => {\r\n        let massSum = []\r\n        let massArr = this.state.totalMassArray\r\n        let i = 0;\r\n        while (i < massArr.length) {\r\n            let total = massArr.reduce((a, b) => a + b, 0)\r\n            massSum.push(total)\r\n            massArr.splice(i, 1, 0)\r\n            i++\r\n        }\r\n        this.setState({ massSum: massSum }, () => {\r\n            console.log('ShipProvider massSum', this.state.massSum);\r\n            this.getDeltaVByStage()\r\n        })\r\n    }\r\n\r\n    getDeltaVByStage = () => {\r\n        let deltaVByStage = []\r\n        let summArr = this.state.massSum\r\n\r\n        for (let i = 0; i < summArr.length; i++) {\r\n            let isp = this.state.ispArray\r\n            let fuelMassArray = this.state.fuelMassArray\r\n            let dryMass = (summArr[i] - fuelMassArray[i])\r\n            let deltaV = isp[i] * 9.82 * Math.log(summArr[i] / dryMass)\r\n            console.log('ShipProvider getDeltaVByStage', isp[i], summArr[i], dryMass)\r\n            if (!isNaN(deltaV)) {\r\n                deltaVByStage.push(deltaV)\r\n                this.setState({ deltaV: deltaVByStage.reduce((a, b) => a + b, 0) })\r\n            } else {\r\n                deltaVByStage.push(0)\r\n            }\r\n        }\r\n        this.setState({ deltaVByStage: deltaVByStage }, () => {\r\n            console.log('ShipProvider summArr', summArr);\r\n            console.log('ShipProvider deltaVByStage', deltaVByStage);\r\n            console.log('ShipProvider Ship', this.state);\r\n        })\r\n    }\r\n\r\n     getMaxFuelByStage =  () => {\r\n        let maxFuelMassArray = []\r\n        let stage = this.state.stage\r\n\r\n        for (let i = 0; i < stage.length; i++) {\r\n            if (stage[i].tank.length > 0) {\r\n                let currentStage = i\r\n                let currentMaxFuel = []\r\n                for (let i = 0; i < stage[currentStage].tank.length; i++) {\r\n                    currentMaxFuel.push(stage[currentStage].tank[i].maxFuel)\r\n                }\r\n                maxFuelMassArray.push(currentMaxFuel.reduce((a, b) => a + b, 0))\r\n                currentStage++\r\n            }\r\n            else {\r\n                maxFuelMassArray.push(0)\r\n            }\r\n        }\r\n        this.setState({ maxFuelMassArray: maxFuelMassArray }, () => {\r\n            console.log('ShipProvider maxFuelMassArray', maxFuelMassArray)\r\n        })\r\n    }\r\n\r\n     getFuelForDV = dv => {\r\n        this.getMaxFuelByStage()\r\n        let summArr = this.state.massSum\r\n        let maxFuelMassArray = this.state.maxFuelMassArray\r\n\r\n        for (let i = 0; i < this.state.stage.length; ) {\r\n            let fuelMassArray = this.state.fuelMassArray\r\n            let dryMass = (summArr[i] - fuelMassArray[i])\r\n            let fuelWeight = dryMass * Math.exp(dv / (9.82 * this.state.ispArray[i]))\r\n            let fuelAmount = fuelWeight * 0.01\r\n            if(fuelAmount < maxFuelMassArray[i]){\r\n                return fuelAmount\r\n            } else {\r\n                i++\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <ShipContext.Provider value={{ \r\n                state: this.state,\r\n                shipSetStage: stage => this.setStage(stage),\r\n                getStats: () => this.getStats(),\r\n                getFuelForDV: dv => this.getFuelForDV(dv)\r\n            }}>\r\n                {this.props.children}\r\n            </ShipContext.Provider>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}