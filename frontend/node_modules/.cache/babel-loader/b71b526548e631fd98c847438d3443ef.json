{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\doubl\\\\Documents\\\\Projets\\\\Try\\\\rocketbuilder\\\\frontend\\\\src\\\\components\\\\controls\\\\ManoeuvreControl.js\";\nimport React, { Component } from 'react';\nimport { ShipContext } from '../../contexts/ShipProvider';\nimport { updateShip } from '../../utils/updateShip';\nimport FromSurface from './FromSurface';\nimport FromOrbit from './FromOrbit';\nimport axios from 'axios';\nexport default class ManoeuvreControl extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fromSurfaceToOrbit = () => {\n      let stage = this.context.state.stage;\n      let requierdDV = Math.sqrt(this.props.ship.celest_body.mu / this.props.ship.celest_body.radius) * 1000 * this.props.ship.celest_body.atmosphere;\n      let dvByStageAfterBurn = [...this.context.state.deltaVByStage];\n      let dvbystage = [...this.context.state.deltaVByStage];\n      let dif = [];\n      console.log('reqDV', requierdDV); // Minus deltaV\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] > requierdDV) {\n          dvByStageAfterBurn[i] -= requierdDV;\n          requierdDV = 0;\n          console.log('Congratulation, you reach orbit');\n        } else {\n          requierdDV -= dvByStageAfterBurn[i];\n          dvByStageAfterBurn[i] = 0;\n        }\n      }\n\n      if (requierdDV !== 0) {\n        console.log('you failed');\n        return;\n      }\n\n      console.log('dvbystage', dvbystage);\n      console.log('dvByStageAfterBurn', dvByStageAfterBurn); // stage separation\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] === 0) {\n          stage.splice(0, 1);\n          dvByStageAfterBurn.splice(0, 1);\n          dvbystage.splice(0, 1);\n        }\n      } // getDv % diference\n\n\n      for (let i = 0; i < dvbystage.length; i++) {\n        dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100));\n      }\n\n      console.log('dif', dif); // updateFuelLastStage\n\n      for (let i = 0; i < stage[0].tank.length; i++) {\n        stage[0].tank[i].remainingFuel = stage[0].tank[i].remainingFuel / 100 * dif[0] / 1.5;\n      } //stage update\n\n\n      this.context.shipSetStage(stage);\n      this.context.updateLocation('orbit');\n      updateShip(stage, this.props.ship.name, 'orbit', this.props.ship.celest_body.id, this.props.ship.id);\n    };\n\n    this.fromOrbitToSurface = () => {};\n\n    this.escapeFromOrbit = () => {};\n\n    this.childTransfer = () => {};\n\n    this.land = () => {};\n  }\n\n  async componentDidMount(props) {\n    const celestBody = await axios({\n      method: 'GET',\n      url: `http://localhost:1337/celest-bodies/${this.props.ship.celest_body.id}`\n    });\n    console.log('celestBody', celestBody);\n  }\n\n  render() {\n    if (this.props.ship) {\n      if (this.props.ship.locationStatus === 'orbit') {\n        return /*#__PURE__*/React.createElement(FromOrbit, {\n          fromOrbitToSurface: this.fromOrbitToSurface,\n          escapeFromOrbit: this.escapeFromOrbit,\n          childTransfer: this.childTransfer,\n          land: this.land,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }\n        });\n      } else if (this.props.ship.locationStatus === 'VAB') {\n        return /*#__PURE__*/React.createElement(FromSurface, {\n          fromSurfaceToOrbit: this.fromSurfaceToOrbit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }\n        });\n      }\n    } else return 'loading';\n  }\n\n}\nManoeuvreControl.contextType = ShipContext;","map":{"version":3,"sources":["C:/Users/doubl/Documents/Projets/Try/rocketbuilder/frontend/src/components/controls/ManoeuvreControl.js"],"names":["React","Component","ShipContext","updateShip","FromSurface","FromOrbit","axios","ManoeuvreControl","fromSurfaceToOrbit","stage","context","state","requierdDV","Math","sqrt","props","ship","celest_body","mu","radius","atmosphere","dvByStageAfterBurn","deltaVByStage","dvbystage","dif","console","log","i","length","splice","push","tank","remainingFuel","shipSetStage","updateLocation","name","id","fromOrbitToSurface","escapeFromOrbit","childTransfer","land","componentDidMount","celestBody","method","url","render","locationStatus","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ShipContext } from '../../contexts/ShipProvider'\r\nimport { updateShip } from '../../utils/updateShip'\r\nimport FromSurface from './FromSurface'\r\nimport FromOrbit from './FromOrbit'\r\nimport axios from 'axios';\r\n\r\nexport default class ManoeuvreControl extends Component {\r\n\r\n    async componentDidMount(props){\r\n        const celestBody = await axios({\r\n            method: 'GET',\r\n            url: `http://localhost:1337/celest-bodies/${this.props.ship.celest_body.id}`\r\n        })\r\n        console.log('celestBody' , celestBody);\r\n    }\r\n\r\n    fromSurfaceToOrbit = () => {\r\n        let stage = this.context.state.stage\r\n        let requierdDV = Math.sqrt(this.props.ship.celest_body.mu / this.props.ship.celest_body.radius) * 1000 * this.props.ship.celest_body.atmosphere\r\n        let dvByStageAfterBurn = [...this.context.state.deltaVByStage]\r\n        let dvbystage = [...this.context.state.deltaVByStage]\r\n        let dif = []\r\n        console.log('reqDV', requierdDV);\r\n        // Minus deltaV\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] > requierdDV) {\r\n                dvByStageAfterBurn[i] -= requierdDV\r\n                requierdDV = 0\r\n                console.log('Congratulation, you reach orbit')\r\n            } else {\r\n                requierdDV -= dvByStageAfterBurn[i]\r\n                dvByStageAfterBurn[i] = 0\r\n            }\r\n        }\r\n        if (requierdDV !== 0) {\r\n            console.log('you failed')\r\n            return\r\n        }\r\n        console.log('dvbystage', dvbystage);\r\n        console.log('dvByStageAfterBurn', dvByStageAfterBurn);\r\n        // stage separation\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] === 0) {\r\n                stage.splice(0, 1)\r\n                dvByStageAfterBurn.splice(0, 1)\r\n                dvbystage.splice(0, 1)\r\n            }\r\n        }\r\n        // getDv % diference\r\n        for (let i = 0; i < dvbystage.length; i++) {\r\n            dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100))\r\n        }\r\n        console.log('dif', dif);\r\n        // updateFuelLastStage\r\n        for (let i = 0; i < stage[0].tank.length; i++) {\r\n            stage[0].tank[i].remainingFuel = (stage[0].tank[i].remainingFuel / 100 * dif[0]) / 1.5\r\n        }\r\n        //stage update\r\n        this.context.shipSetStage(stage)\r\n        this.context.updateLocation('orbit')\r\n        updateShip(stage, this.props.ship.name, 'orbit', this.props.ship.celest_body.id, this.props.ship.id)\r\n    }\r\n\r\n    fromOrbitToSurface = () => {\r\n\r\n    }\r\n\r\n    escapeFromOrbit = () => {\r\n\r\n    }\r\n\r\n    childTransfer = () => {\r\n\r\n    }\r\n\r\n    land = () => {\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.props.ship) {\r\n            if (this.props.ship.locationStatus === 'orbit') {\r\n                return (\r\n                        <FromOrbit\r\n                            fromOrbitToSurface={this.fromOrbitToSurface}\r\n                            escapeFromOrbit={this.escapeFromOrbit}\r\n                            childTransfer={this.childTransfer}\r\n                            land={this.land}\r\n                        />\r\n                )\r\n            } else if (this.props.ship.locationStatus === 'VAB') {\r\n                return (\r\n                        <FromSurface\r\n                            fromSurfaceToOrbit={this.fromSurfaceToOrbit}\r\n                        />\r\n                )\r\n            }\r\n        } else return 'loading'\r\n    }\r\n}\r\n\r\nManoeuvreControl.contextType = ShipContext;\r\n"]},"metadata":{},"sourceType":"module"}