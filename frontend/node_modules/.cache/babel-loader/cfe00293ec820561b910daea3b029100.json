{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\doubl\\\\Documents\\\\Projets\\\\Try\\\\rocketbuilder\\\\frontend\\\\src\\\\components\\\\controls\\\\ManoeuvreControl.js\";\nimport React, { Component } from 'react';\nimport { ShipContext } from '../../contexts/ShipProvider';\nimport { updateShip } from '../../utils/updateShip';\nimport { deleteShip } from '../../utils/deleteShip';\nimport FromSurface from './FromSurface';\nimport FromOrbit from './FromOrbit';\nimport axios from 'axios';\nexport default class ManoeuvreControl extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false\n    };\n\n    this.burn = (requierdDV, risk) => {\n      let stage = this.context.state.stage;\n      let dvByStageAfterBurn = [...this.context.state.deltaVByStage];\n      let dvbystage = [...this.context.state.deltaVByStage];\n      let dif = [];\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] > requierdDV) {\n          dvByStageAfterBurn[i] -= requierdDV;\n          requierdDV = 0;\n        } else {\n          requierdDV -= dvByStageAfterBurn[i];\n          dvByStageAfterBurn[i] = 0;\n        }\n      } // stage separation\n\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] === 0) {\n          stage.splice(0, 1);\n          dvByStageAfterBurn.splice(0, 1);\n          dvbystage.splice(0, 1);\n        }\n      } // getDv % diference\n\n\n      for (let i = 0; i < dvbystage.length; i++) {\n        dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100));\n      }\n\n      console.log('dif', dif); // updateFuelLastStage\n\n      if (requierdDV === 0) {\n        for (let i = 0; i < stage[0].tank.length; i++) {\n          stage[0].tank[i].remainingFuel = stage[0].tank[i].remainingFuel / 100 * dif[0] / 1.6;\n        }\n      }\n\n      if (requierdDV !== 0) {\n        if (risk === true) {\n          deleteShip(this.context.state.ship.id);\n          return false;\n        }\n      }\n\n      console.log('dvbystage', dvbystage);\n      console.log('dvByStageAfterBurn', dvByStageAfterBurn);\n      return stage;\n    };\n\n    this.fromSurfaceToOrbit = () => {\n      this.setState({\n        isLoading: true\n      }, async () => {\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 * this.context.state.ship.celest_body.atmosphere;\n        console.log('reqDV', requierdDV);\n        let stage = this.burn(requierdDV, true);\n\n        if (stage === false) {\n          this.setState({\n            isLoading: false\n          }, () => {\n            console.log('you ran out of fuel and your rocket crashed');\n          });\n        } else {\n          console.log('congrats, you reach orbit'); //stage update\n\n          const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id);\n          this.context.shipSetStage(stage);\n          this.context.updateLocation('orbit', celest_body);\n          console.log('celest_body', celest_body); //save to database\n\n          updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.id, this.context.state.ship.id, celest_body.lowOrbit);\n        }\n      });\n    };\n\n    this.fromOrbitToSurface = async () => {\n      let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 / this.context.state.ship.celest_body.atmosphere;\n      console.log('reqDV', requierdDV);\n      let stage = this.burn(requierdDV, true);\n\n      if (stage === false) {\n        console.log('you crashed');\n      } else {\n        console.log('congrats, you landed');\n        const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id);\n        this.context.shipSetStage(stage);\n        this.context.updateLocation('ground', celest_body);\n        console.log('celest_body', celest_body); //save to database\n\n        updateShip(stage, this.context.state.ship.name, 'ground', celest_body.id, this.context.state.ship.id, celest_body.lowOrbit);\n      }\n    };\n\n    this.escapeFromOrbit = async () => {\n      let requierdDV = this.context.state.ship.celest_body.escapeVelocity;\n      console.log('reqDV', requierdDV);\n      let stage = this.burn(requierdDV, true);\n\n      if (stage === false) {\n        console.log('you ran out of fuel, you are lost in space'); // destroy ship\n      } else {\n        console.log('congrats, you escaped Kerbin system influence, you are now orbiting around Kerbol'); //stage update\n\n        const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id);\n        this.context.updateLocation('orbit', celest_body.childrens[0]);\n        this.context.shipSetStage(stage);\n        console.log('celest_body.childrens[0]', celest_body.childrens[0]); //save to database\n\n        updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.childrens[0].id, this.context.state.ship.id, celest_body.apoapsis);\n      }\n    };\n\n    this.commandModuleReEntry = () => {\n      let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 100;\n      console.log(requierdDV);\n    };\n\n    this.childTransfer = () => {\n      let requierdDV;\n      console.log('reqDV', requierdDV);\n    };\n\n    this.planetTransfert = async targetBody => {\n      let distance;\n\n      if (targetBody.apoapsis > this.context.state.ship.altitudeFromParent) {\n        distance = targetBody.apoapsis - this.context.state.ship.altitudeFromParent;\n      } else {\n        distance = this.context.state.ship.altitudeFromParent - targetBody.apoapsis;\n      }\n\n      let requierdDV = Math.sqrt(distance) / 2;\n      let stage = this.burn(requierdDV, true);\n\n      if (stage === false) {\n        console.log('you ran out of fuel, you are lost in space'); // destroy ship\n      } else {\n        console.log('congrats, you are now orbiting around an other planet '); //stage update\n\n        const celest_body = await this.getCelestBody(targetBody.id);\n        this.context.updateLocation('orbit', celest_body);\n        this.context.shipSetStage(stage);\n        console.log('celest_body.childrens[0]', celest_body); //save to database\n\n        updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.id, this.context.state.ship.id, celest_body.apoapsis);\n      }\n    };\n  }\n\n  async getCelestBody(id) {\n    try {\n      const celestBodyRes = await axios({\n        method: 'GET',\n        url: `http://localhost:1337/celest-bodies/${id}`\n      });\n      const fetchedCelestBody = celestBodyRes.data;\n      return fetchedCelestBody;\n    } catch (e) {\n      alert(e);\n    }\n  }\n\n  render() {\n    if (isLoading === false) {\n      return /*#__PURE__*/React.createElement(ShipContext.Provider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(FromOrbit, {\n        fromOrbitToSurface: this.fromOrbitToSurface,\n        escapeFromOrbit: this.escapeFromOrbit,\n        childTransfer: this.childTransfer,\n        commandModuleReEntry: this.commandModuleReEntry,\n        planetTransfert: targetBodyPeriapsis => this.planetTransfert(targetBodyPeriapsis),\n        ship: this.context.state.ship,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }\n      }));\n    } else if (this.context.state.ship.locationStatus === 'ground') {\n      return /*#__PURE__*/React.createElement(ShipContext.Provider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(FromSurface, {\n        fromSurfaceToOrbit: this.fromSurfaceToOrbit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }\n      }));\n    } else {\n      return '';\n    }\n  }\n\n}\nManoeuvreControl.contextType = ShipContext;","map":{"version":3,"sources":["C:/Users/doubl/Documents/Projets/Try/rocketbuilder/frontend/src/components/controls/ManoeuvreControl.js"],"names":["React","Component","ShipContext","updateShip","deleteShip","FromSurface","FromOrbit","axios","ManoeuvreControl","state","isLoading","burn","requierdDV","risk","stage","context","dvByStageAfterBurn","deltaVByStage","dvbystage","dif","i","length","splice","push","console","log","tank","remainingFuel","ship","id","fromSurfaceToOrbit","setState","Math","sqrt","celest_body","mu","radius","atmosphere","getCelestBody","shipSetStage","updateLocation","name","lowOrbit","fromOrbitToSurface","escapeFromOrbit","escapeVelocity","childrens","apoapsis","commandModuleReEntry","childTransfer","planetTransfert","targetBody","distance","altitudeFromParent","celestBodyRes","method","url","fetchedCelestBody","data","e","alert","render","targetBodyPeriapsis","locationStatus","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ShipContext } from '../../contexts/ShipProvider'\r\nimport { updateShip } from '../../utils/updateShip'\r\nimport { deleteShip } from '../../utils/deleteShip'\r\nimport FromSurface from './FromSurface'\r\nimport FromOrbit from './FromOrbit'\r\nimport axios from 'axios';\r\n\r\nexport default class ManoeuvreControl extends Component {\r\n    state = {\r\n        isLoading: false\r\n    }\r\n\r\n    burn = (requierdDV, risk) => {\r\n        let stage = this.context.state.stage\r\n        let dvByStageAfterBurn = [...this.context.state.deltaVByStage]\r\n        let dvbystage = [...this.context.state.deltaVByStage]\r\n        let dif = []\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] > requierdDV) {\r\n                dvByStageAfterBurn[i] -= requierdDV\r\n                requierdDV = 0\r\n            } else {\r\n                requierdDV -= dvByStageAfterBurn[i]\r\n                dvByStageAfterBurn[i] = 0\r\n            }\r\n        }\r\n        // stage separation\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] === 0) {\r\n                stage.splice(0, 1)\r\n                dvByStageAfterBurn.splice(0, 1)\r\n                dvbystage.splice(0, 1)\r\n            }\r\n        }\r\n        // getDv % diference\r\n        for (let i = 0; i < dvbystage.length; i++) {\r\n            dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100))\r\n        }\r\n        console.log('dif', dif);\r\n        // updateFuelLastStage\r\n        if (requierdDV === 0) {\r\n            for (let i = 0; i < stage[0].tank.length; i++) {\r\n                stage[0].tank[i].remainingFuel = (stage[0].tank[i].remainingFuel / 100 * dif[0]) / 1.6\r\n            }\r\n        }\r\n        if (requierdDV !== 0) {\r\n            if (risk === true) {\r\n                deleteShip(this.context.state.ship.id)\r\n                return false\r\n            }\r\n        }\r\n        console.log('dvbystage', dvbystage);\r\n        console.log('dvByStageAfterBurn', dvByStageAfterBurn);\r\n        return stage\r\n    }\r\n\r\n    async getCelestBody(id) {\r\n        try {\r\n            const celestBodyRes = await axios({\r\n                method: 'GET',\r\n                url: `http://localhost:1337/celest-bodies/${id}`\r\n            })\r\n            const fetchedCelestBody = celestBodyRes.data\r\n            return fetchedCelestBody\r\n        } catch (e) {\r\n            alert(e)\r\n        }\r\n    }\r\n\r\n    fromSurfaceToOrbit = () => {\r\n        this.setState({ isLoading: true }, async () => {\r\n\r\n            let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 * this.context.state.ship.celest_body.atmosphere\r\n            console.log('reqDV', requierdDV);\r\n            let stage = this.burn(requierdDV, true)\r\n            if (stage === false) {\r\n                this.setState({isLoading: false}, () => {\r\n                    console.log('you ran out of fuel and your rocket crashed');\r\n                })\r\n            } else {\r\n                console.log('congrats, you reach orbit');\r\n\r\n                //stage update\r\n                const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id)\r\n                this.context.shipSetStage(stage)\r\n                this.context.updateLocation('orbit', celest_body)\r\n\r\n                console.log('celest_body', celest_body);\r\n\r\n                //save to database\r\n                updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.id, this.context.state.ship.id, celest_body.lowOrbit)\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n\r\n    fromOrbitToSurface = async () => {\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 / this.context.state.ship.celest_body.atmosphere\r\n        console.log('reqDV', requierdDV);\r\n        let stage = this.burn(requierdDV, true)\r\n        if (stage === false) {\r\n            console.log('you crashed');\r\n        } else {\r\n            console.log('congrats, you landed');\r\n\r\n            const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id)\r\n            this.context.shipSetStage(stage)\r\n            this.context.updateLocation('ground', celest_body)\r\n            console.log('celest_body', celest_body);\r\n            //save to database\r\n            updateShip(stage, this.context.state.ship.name, 'ground', celest_body.id, this.context.state.ship.id, celest_body.lowOrbit)\r\n        }\r\n    }\r\n\r\n    escapeFromOrbit = async () => {\r\n        let requierdDV = this.context.state.ship.celest_body.escapeVelocity\r\n        console.log('reqDV', requierdDV);\r\n        let stage = this.burn(requierdDV, true)\r\n        if (stage === false) {\r\n            console.log('you ran out of fuel, you are lost in space')\r\n            // destroy ship\r\n        } else {\r\n            console.log('congrats, you escaped Kerbin system influence, you are now orbiting around Kerbol')\r\n\r\n            //stage update\r\n            const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id)\r\n            this.context.updateLocation('orbit', celest_body.childrens[0])\r\n            this.context.shipSetStage(stage)\r\n            console.log('celest_body.childrens[0]', celest_body.childrens[0]);\r\n            //save to database\r\n            updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.childrens[0].id, this.context.state.ship.id, celest_body.apoapsis)\r\n        }\r\n    }\r\n\r\n    commandModuleReEntry = () => {\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 100\r\n        console.log(requierdDV)\r\n    }\r\n\r\n    childTransfer = () => {\r\n        let requierdDV\r\n        console.log('reqDV', requierdDV);\r\n    }\r\n\r\n    planetTransfert = async (targetBody) => {\r\n        let distance\r\n        if (targetBody.apoapsis > this.context.state.ship.altitudeFromParent) {\r\n            distance = targetBody.apoapsis - this.context.state.ship.altitudeFromParent\r\n        } else {\r\n            distance = this.context.state.ship.altitudeFromParent - targetBody.apoapsis\r\n        }\r\n        let requierdDV = Math.sqrt(distance) / 2\r\n\r\n        let stage = this.burn(requierdDV, true)\r\n        if (stage === false) {\r\n            console.log('you ran out of fuel, you are lost in space')\r\n            // destroy ship\r\n        } else {\r\n            console.log('congrats, you are now orbiting around an other planet ')\r\n\r\n            //stage update\r\n            const celest_body = await this.getCelestBody(targetBody.id)\r\n            this.context.updateLocation('orbit', celest_body)\r\n            this.context.shipSetStage(stage)\r\n            console.log('celest_body.childrens[0]', celest_body);\r\n            //save to database\r\n            updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.id, this.context.state.ship.id, celest_body.apoapsis)\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        if (isLoading === false) {\r\n            return <ShipContext.Provider>\r\n                <FromOrbit\r\n                    fromOrbitToSurface={this.fromOrbitToSurface}\r\n                    escapeFromOrbit={this.escapeFromOrbit}\r\n                    childTransfer={this.childTransfer}\r\n                    commandModuleReEntry={this.commandModuleReEntry}\r\n                    planetTransfert={(targetBodyPeriapsis) => this.planetTransfert(targetBodyPeriapsis)}\r\n                    ship={this.context.state.ship}\r\n                />\r\n            </ShipContext.Provider>\r\n        } else if (this.context.state.ship.locationStatus === 'ground') {\r\n            return <ShipContext.Provider>\r\n                <FromSurface\r\n                    fromSurfaceToOrbit={this.fromSurfaceToOrbit}\r\n                />\r\n            </ShipContext.Provider>\r\n        }\r\n        else {\r\n            return ''\r\n        }\r\n    }\r\n}\r\n\r\nManoeuvreControl.contextType = ShipContext;\r\n"]},"metadata":{},"sourceType":"module"}