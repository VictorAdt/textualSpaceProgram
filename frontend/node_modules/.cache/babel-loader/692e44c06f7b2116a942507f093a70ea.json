{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\doubl\\\\Documents\\\\Projets\\\\Try\\\\rocketbuilder\\\\frontend\\\\src\\\\components\\\\controls\\\\ManoeuvreControl.js\";\nimport React, { Component } from 'react';\nimport { ShipContext } from '../../contexts/ShipProvider';\nimport { updateShip } from '../../utils/updateShip';\nimport { deleteShip } from '../../utils/deleteShip';\nimport FromSurface from './FromSurface';\nimport FromOrbit from './FromOrbit';\nimport axios from 'axios';\nexport default class ManoeuvreControl extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      celestBodies: []\n    };\n\n    this.fromSurfaceToOrbit = () => {\n      let stage = this.context.state.stage;\n      let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 * this.context.state.ship.celest_body.atmosphere;\n      let dvByStageAfterBurn = [...this.context.state.deltaVByStage];\n      let dvbystage = [...this.context.state.deltaVByStage];\n      let dif = [];\n      console.log('reqDV', requierdDV); // Minus deltaV\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] > requierdDV) {\n          dvByStageAfterBurn[i] -= requierdDV;\n          requierdDV = 0;\n          console.log('Congratulation, you reach orbit');\n        } else {\n          requierdDV -= dvByStageAfterBurn[i];\n          dvByStageAfterBurn[i] = 0;\n        }\n      }\n\n      if (requierdDV !== 0) {\n        console.log('you crashed');\n        deleteShip(this.context.state.ship.id);\n        return;\n      }\n\n      console.log('dvbystage', dvbystage);\n      console.log('dvByStageAfterBurn', dvByStageAfterBurn); // stage separation\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] === 0) {\n          stage.splice(0, 1);\n          dvByStageAfterBurn.splice(0, 1);\n          dvbystage.splice(0, 1);\n        }\n      } // getDv % diference\n\n\n      for (let i = 0; i < dvbystage.length; i++) {\n        dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100));\n      }\n\n      console.log('dif', dif); // updateFuelLastStage\n\n      for (let i = 0; i < stage[0].tank.length; i++) {\n        stage[0].tank[i].remainingFuel = stage[0].tank[i].remainingFuel / 100 * dif[0] / 1.6;\n      } //stage update\n\n\n      this.context.shipSetStage(stage);\n      this.context.updateLocation('orbit');\n      updateShip(stage, this.context.state.ship.name, 'orbit', this.context.state.ship.celest_body.id, this.context.state.ship.id, this.context.state.ship.celest_body.lowOrbit);\n      console.log('manoeuvre context ', this.context);\n    };\n\n    this.burn = (requierdDV, risk) => {\n      let stage = this.context.state.stage;\n      let dvByStageAfterBurn = [...this.context.state.deltaVByStage];\n      let dvbystage = [...this.context.state.deltaVByStage];\n      let dif = [];\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] > requierdDV) {\n          dvByStageAfterBurn[i] -= requierdDV;\n          requierdDV = 0;\n        } else {\n          requierdDV -= dvByStageAfterBurn[i];\n          dvByStageAfterBurn[i] = 0;\n        }\n      }\n\n      if (requierdDV !== 0) {\n        if (risk === true) {\n          deleteShip(this.context.state.ship.id);\n          return false;\n        }\n      }\n\n      console.log('dvbystage', dvbystage);\n      console.log('dvByStageAfterBurn', dvByStageAfterBurn); // stage separation\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] === 0) {\n          stage.splice(0, 1);\n          dvByStageAfterBurn.splice(0, 1);\n          dvbystage.splice(0, 1);\n        }\n      } // getDv % diference\n\n\n      for (let i = 0; i < dvbystage.length; i++) {\n        dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100));\n      }\n\n      console.log('dif', dif); // updateFuelLastStage\n\n      for (let i = 0; i < stage[0].tank.length; i++) {\n        stage[0].tank[i].remainingFuel = stage[0].tank[i].remainingFuel / 100 * dif[0] / 1.6;\n      }\n\n      return stage;\n    };\n\n    this.fromOrbitToSurface = () => {\n      let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 / this.context.state.ship.celest_body.atmosphere;\n      let stage = this.burn(requierdDV);\n      console.log('stage', stage); //stage update\n\n      this.context.shipSetStage(stage);\n      this.context.updateLocation('ground');\n      updateShip(stage, this.context.state.ship.name, 'ground', this.context.state.ship.celest_body.id, this.context.state.ship.id, 0);\n      console.log('manoeuvre context ', this.context);\n    };\n\n    this.commandModuleReEntry = () => {\n      let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 100;\n      console.log(requierdDV);\n    };\n\n    this.escapeFromOrbit = async () => {\n      let requierdDV = this.context.state.ship.celest_body.escapeVelocity;\n      console.log(requierdDV);\n      let stage = this.context.state.stage;\n      let dvByStageAfterBurn = [...this.context.state.deltaVByStage];\n      let dvbystage = [...this.context.state.deltaVByStage];\n      let dif = [];\n      console.log('reqDV', requierdDV);\n      const altitude = await this.getCelestBody(this.context.state.ship.celest_body.id);\n      console.log(altitude); // Minus deltaV\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] > requierdDV) {\n          dvByStageAfterBurn[i] -= requierdDV;\n          requierdDV = 0;\n          console.log('you are now orbiting around the sun');\n        } else {\n          requierdDV -= dvByStageAfterBurn[i];\n          dvByStageAfterBurn[i] = 0;\n        }\n      }\n\n      if (requierdDV !== 0) {\n        console.log('no more fuel');\n        return;\n      }\n\n      console.log('dvbystage', dvbystage);\n      console.log('dvByStageAfterBurn', dvByStageAfterBurn); // stage separation\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] === 0) {\n          stage.splice(0, 1);\n          dvByStageAfterBurn.splice(0, 1);\n          dvbystage.splice(0, 1);\n        }\n      } // getDv % diference\n\n\n      for (let i = 0; i < dvbystage.length; i++) {\n        dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100));\n      }\n\n      console.log('dif', dif); // updateFuelLastStage\n\n      for (let i = 0; i < stage[0].tank.length; i++) {\n        stage[0].tank[i].remainingFuel = stage[0].tank[i].remainingFuel / 100 * dif[0] / 1.6;\n      } //stage update\n\n\n      this.context.shipSetStage(stage);\n      this.context.updateLocation('orbit');\n      updateShip(stage, this.context.state.ship.name, 'orbit', 3, this.context.state.ship.id, this.context.state.ship.celest_body.apoapsis, altitude);\n      console.log('manoeuvre context ', this.context);\n    };\n\n    this.childTransfer = () => {\n      let requierdDV;\n      console.log(requierdDV);\n    };\n\n    this.planetTransfert = targetBodyPeriapsis => {\n      let requierdDV = parseInt(Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.altitudeFromParent) * Math.sqrt(Math.pow(2 * targetBodyPeriapsis, 2) / (this.context.state.ship.altitudeFromParent + targetBodyPeriapsis) - 1));\n      console.log(requierdDV);\n    };\n  }\n\n  async componentDidMount() {\n    if (this.context.state.ship.celest_body) {\n      try {\n        const celestBodyRes = await axios({\n          method: 'GET',\n          url: `http://localhost:1337/celest-bodies/`\n        });\n        const fetchedCelestBody = celestBodyRes.data;\n        this.setState({\n          celestBodies: fetchedCelestBody\n        });\n        console.log('fetchedCelestBody', fetchedCelestBody);\n      } catch (e) {\n        alert(e);\n      }\n    }\n  }\n\n  async getCelestBody(id) {\n    try {\n      const celestBodyRes = await axios({\n        method: 'GET',\n        url: `http://localhost:1337/celest-bodies/${id}`\n      });\n      const fetchedCelestBody = celestBodyRes.data;\n      return fetchedCelestBody.apoapsis;\n    } catch (e) {\n      alert(e);\n    }\n  }\n\n  render() {\n    if (this.state.celestBodies.length > 0) {\n      if (this.context.state.ship.locationStatus === 'orbit') {\n        return /*#__PURE__*/React.createElement(ShipContext.Provider, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 24\n          }\n        }, /*#__PURE__*/React.createElement(FromOrbit, {\n          fromOrbitToSurface: this.fromOrbitToSurface,\n          escapeFromOrbit: this.escapeFromOrbit,\n          childTransfer: this.childTransfer,\n          commandModuleReEntry: this.commandModuleReEntry,\n          planetTransfert: targetBodyPeriapsis => this.planetTransfert(targetBodyPeriapsis),\n          celestBodiesList: this.state.celestBodies,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }\n        }));\n      } else if (this.context.state.ship.locationStatus === 'ground') {\n        return /*#__PURE__*/React.createElement(ShipContext.Provider, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 24\n          }\n        }, /*#__PURE__*/React.createElement(FromSurface, {\n          fromSurfaceToOrbit: this.fromSurfaceToOrbit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 25\n          }\n        }));\n      }\n    } else {\n      return '';\n    }\n  }\n\n}\nManoeuvreControl.contextType = ShipContext;","map":{"version":3,"sources":["C:/Users/doubl/Documents/Projets/Try/rocketbuilder/frontend/src/components/controls/ManoeuvreControl.js"],"names":["React","Component","ShipContext","updateShip","deleteShip","FromSurface","FromOrbit","axios","ManoeuvreControl","state","celestBodies","fromSurfaceToOrbit","stage","context","requierdDV","Math","sqrt","ship","celest_body","mu","radius","atmosphere","dvByStageAfterBurn","deltaVByStage","dvbystage","dif","console","log","i","length","id","splice","push","tank","remainingFuel","shipSetStage","updateLocation","name","lowOrbit","burn","risk","fromOrbitToSurface","commandModuleReEntry","escapeFromOrbit","escapeVelocity","altitude","getCelestBody","apoapsis","childTransfer","planetTransfert","targetBodyPeriapsis","parseInt","altitudeFromParent","pow","componentDidMount","celestBodyRes","method","url","fetchedCelestBody","data","setState","e","alert","render","locationStatus","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ShipContext } from '../../contexts/ShipProvider'\r\nimport { updateShip } from '../../utils/updateShip'\r\nimport { deleteShip } from '../../utils/deleteShip'\r\nimport FromSurface from './FromSurface'\r\nimport FromOrbit from './FromOrbit'\r\nimport axios from 'axios';\r\n\r\nexport default class ManoeuvreControl extends Component {\r\n    state={\r\n        celestBodies: []\r\n    }\r\n    async componentDidMount() {\r\n        if(this.context.state.ship.celest_body){\r\n        try {\r\n            const celestBodyRes = await axios({\r\n                method: 'GET',\r\n                url: `http://localhost:1337/celest-bodies/`\r\n            })\r\n            const fetchedCelestBody = celestBodyRes.data\r\n            this.setState({celestBodies: fetchedCelestBody})\r\n            console.log('fetchedCelestBody', fetchedCelestBody);\r\n        } catch(e){\r\n            alert(e)\r\n        }}\r\n    }\r\n\r\n    fromSurfaceToOrbit = () => {\r\n        let stage = this.context.state.stage\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 * this.context.state.ship.celest_body.atmosphere\r\n        let dvByStageAfterBurn = [...this.context.state.deltaVByStage]\r\n        let dvbystage = [...this.context.state.deltaVByStage]\r\n        let dif = []\r\n        console.log('reqDV', requierdDV);\r\n        // Minus deltaV\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] > requierdDV) {\r\n                dvByStageAfterBurn[i] -= requierdDV\r\n                requierdDV = 0\r\n                console.log('Congratulation, you reach orbit')\r\n            } else {\r\n                requierdDV -= dvByStageAfterBurn[i]\r\n                dvByStageAfterBurn[i] = 0\r\n            }\r\n        }\r\n        if (requierdDV !== 0) {\r\n            console.log('you crashed')\r\n            deleteShip(this.context.state.ship.id)\r\n            return\r\n        }\r\n        console.log('dvbystage', dvbystage);\r\n        console.log('dvByStageAfterBurn', dvByStageAfterBurn);\r\n        // stage separation\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] === 0) {\r\n                stage.splice(0, 1)\r\n                dvByStageAfterBurn.splice(0, 1)\r\n                dvbystage.splice(0, 1)\r\n            }\r\n        }\r\n        // getDv % diference\r\n        for (let i = 0; i < dvbystage.length; i++) {\r\n            dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100))\r\n        }\r\n        console.log('dif', dif);\r\n        // updateFuelLastStage\r\n        for (let i = 0; i < stage[0].tank.length; i++) {\r\n            stage[0].tank[i].remainingFuel = (stage[0].tank[i].remainingFuel / 100 * dif[0]) / 1.6\r\n        }\r\n        //stage update\r\n        this.context.shipSetStage(stage)\r\n        this.context.updateLocation('orbit')\r\n        updateShip(stage, this.context.state.ship.name, 'orbit', this.context.state.ship.celest_body.id, this.context.state.ship.id, this.context.state.ship.celest_body.lowOrbit)\r\n        console.log('manoeuvre context ', this.context);\r\n    }\r\n\r\n    burn = (requierdDV, risk) => {\r\n        let stage = this.context.state.stage\r\n        let dvByStageAfterBurn = [...this.context.state.deltaVByStage]\r\n        let dvbystage = [...this.context.state.deltaVByStage]\r\n        let dif = []\r\n\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] > requierdDV) {\r\n                dvByStageAfterBurn[i] -= requierdDV\r\n                requierdDV = 0\r\n            } else {\r\n                requierdDV -= dvByStageAfterBurn[i]\r\n                dvByStageAfterBurn[i] = 0\r\n            }\r\n        }\r\n        if (requierdDV !== 0) {\r\n            if(risk === true){\r\n                deleteShip(this.context.state.ship.id)\r\n                return false\r\n            }\r\n        }\r\n        console.log('dvbystage', dvbystage);\r\n        console.log('dvByStageAfterBurn', dvByStageAfterBurn);\r\n        // stage separation\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] === 0) {\r\n                stage.splice(0, 1)\r\n                dvByStageAfterBurn.splice(0, 1)\r\n                dvbystage.splice(0, 1)\r\n            }\r\n        }\r\n        // getDv % diference\r\n        for (let i = 0; i < dvbystage.length; i++) {\r\n            dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100))\r\n        }\r\n        console.log('dif', dif);\r\n        // updateFuelLastStage\r\n        for (let i = 0; i < stage[0].tank.length; i++) {\r\n            stage[0].tank[i].remainingFuel = (stage[0].tank[i].remainingFuel / 100 * dif[0]) / 1.6\r\n        }\r\n\r\n        return stage\r\n    }\r\n\r\n    fromOrbitToSurface = () => {\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 / this.context.state.ship.celest_body.atmosphere\r\n        let stage = this.burn(requierdDV)\r\n        console.log('stage', stage);\r\n        //stage update\r\n        this.context.shipSetStage(stage)\r\n        this.context.updateLocation('ground')\r\n        updateShip(stage, this.context.state.ship.name, 'ground', this.context.state.ship.celest_body.id, this.context.state.ship.id, 0)\r\n        console.log('manoeuvre context ', this.context);\r\n    }\r\n\r\n    commandModuleReEntry = () => {\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 100 \r\n        console.log(requierdDV)\r\n    }\r\n\r\n    async getCelestBody(id){\r\n        try {\r\n            const celestBodyRes = await axios({\r\n                method: 'GET',\r\n                url: `http://localhost:1337/celest-bodies/${id}`\r\n            })\r\n            const fetchedCelestBody = celestBodyRes.data\r\n            return  fetchedCelestBody.apoapsis\r\n        } catch(e){\r\n            alert(e)\r\n        }\r\n    }\r\n    \r\n     escapeFromOrbit = async () => {\r\n        let requierdDV = this.context.state.ship.celest_body.escapeVelocity\r\n        console.log(requierdDV)\r\n        let stage = this.context.state.stage\r\n        let dvByStageAfterBurn = [...this.context.state.deltaVByStage]\r\n        let dvbystage = [...this.context.state.deltaVByStage]\r\n        let dif = []\r\n        console.log('reqDV', requierdDV);\r\n\r\n        const altitude = await this.getCelestBody(this.context.state.ship.celest_body.id)\r\n        console.log(altitude);\r\n\r\n        // Minus deltaV\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] > requierdDV) {\r\n                dvByStageAfterBurn[i] -= requierdDV\r\n                requierdDV = 0\r\n                console.log('you are now orbiting around the sun')\r\n            } else {\r\n                requierdDV -= dvByStageAfterBurn[i]\r\n                dvByStageAfterBurn[i] = 0\r\n            }\r\n        }\r\n        if (requierdDV !== 0) {\r\n            console.log('no more fuel')\r\n            return\r\n        }\r\n        console.log('dvbystage', dvbystage);\r\n        console.log('dvByStageAfterBurn', dvByStageAfterBurn);\r\n        // stage separation\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] === 0) {\r\n                stage.splice(0, 1)\r\n                dvByStageAfterBurn.splice(0, 1)\r\n                dvbystage.splice(0, 1)\r\n            }\r\n        }\r\n        // getDv % diference\r\n        for (let i = 0; i < dvbystage.length; i++) {\r\n            dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100))\r\n        }\r\n        console.log('dif', dif);\r\n        // updateFuelLastStage\r\n        for (let i = 0; i < stage[0].tank.length; i++) {\r\n            stage[0].tank[i].remainingFuel = (stage[0].tank[i].remainingFuel / 100 * dif[0]) / 1.6\r\n        }\r\n        //stage update\r\n        this.context.shipSetStage(stage)\r\n        this.context.updateLocation('orbit')\r\n        updateShip(stage, this.context.state.ship.name, 'orbit', 3 , this.context.state.ship.id, this.context.state.ship.celest_body.apoapsis, altitude)\r\n        console.log('manoeuvre context ', this.context);\r\n    }\r\n\r\n    childTransfer = () => {\r\n        let requierdDV\r\n        console.log(requierdDV)\r\n    }\r\n\r\n    planetTransfert = (targetBodyPeriapsis) => {\r\n        let requierdDV = parseInt(Math.sqrt( this.context.state.ship.celest_body.mu / this.context.state.ship.altitudeFromParent) * (Math.sqrt(Math.pow(2 * targetBodyPeriapsis, 2) / (this.context.state.ship.altitudeFromParent + targetBodyPeriapsis) -1 )))\r\n        console.log(requierdDV);\r\n    }\r\n\r\n    render() {\r\n        if(this.state.celestBodies.length > 0){\r\n            if (this.context.state.ship.locationStatus === 'orbit') {\r\n                return <ShipContext.Provider>\r\n                        <FromOrbit\r\n                            fromOrbitToSurface={this.fromOrbitToSurface}\r\n                            escapeFromOrbit={this.escapeFromOrbit}\r\n                            childTransfer={this.childTransfer}\r\n                            commandModuleReEntry={this.commandModuleReEntry}\r\n                            planetTransfert={(targetBodyPeriapsis) => this.planetTransfert(targetBodyPeriapsis)}\r\n                            celestBodiesList={this.state.celestBodies}\r\n                        />\r\n                    </ShipContext.Provider>\r\n            } else if (this.context.state.ship.locationStatus === 'ground') {\r\n                return <ShipContext.Provider>\r\n                        <FromSurface\r\n                            fromSurfaceToOrbit={this.fromSurfaceToOrbit}\r\n                        />\r\n                     </ShipContext.Provider>\r\n            }\r\n        }else {\r\n            return ''\r\n        }\r\n    }\r\n}\r\n\r\nManoeuvreControl.contextType = ShipContext;\r\n"]},"metadata":{},"sourceType":"module"}