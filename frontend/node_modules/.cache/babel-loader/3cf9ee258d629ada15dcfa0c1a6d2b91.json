{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\doubl\\\\Documents\\\\Projets\\\\Try\\\\rocketbuilder\\\\frontend\\\\src\\\\components\\\\controls\\\\ManoeuvreControl.js\";\nimport React, { Component } from 'react';\nimport { ShipContext } from '../../contexts/ShipProvider';\nimport { updateShip } from '../../utils/updateShip';\nimport { deleteShip } from '../../utils/deleteShip';\nimport FromSurface from './FromSurface';\nimport FromOrbit from './FromOrbit';\nimport axios from 'axios';\nexport default class ManoeuvreControl extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      celestBodies: []\n    };\n\n    this.burn = (requierdDV, risk) => {\n      let stage = this.context.state.stage;\n      let dvByStageAfterBurn = [...this.context.state.deltaVByStage];\n      let dvbystage = [...this.context.state.deltaVByStage];\n      let dif = [];\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] > requierdDV) {\n          dvByStageAfterBurn[i] -= requierdDV;\n          requierdDV = 0;\n        } else {\n          requierdDV -= dvByStageAfterBurn[i];\n          dvByStageAfterBurn[i] = 0;\n        }\n      }\n\n      console.log('dvbystage', dvbystage);\n      console.log('dvByStageAfterBurn', dvByStageAfterBurn); // stage separation\n\n      for (let i = 0; i < dvByStageAfterBurn.length; i++) {\n        if (dvByStageAfterBurn[i] === 0) {\n          stage.splice(0, 1);\n          dvByStageAfterBurn.splice(0, 1);\n          dvbystage.splice(0, 1);\n        }\n      } // getDv % diference\n\n\n      for (let i = 0; i < dvbystage.length; i++) {\n        dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100));\n      }\n\n      console.log('dif', dif); // updateFuelLastStage\n\n      for (let i = 0; i < stage[0].tank.length; i++) {\n        stage[0].tank[i].remainingFuel = stage[0].tank[i].remainingFuel / 100 * dif[0] / 1.6;\n      }\n\n      if (requierdDV !== 0) {\n        if (risk === true) {\n          deleteShip(this.context.state.ship.id);\n          return false;\n        }\n      }\n\n      return stage;\n    };\n\n    this.fromOrbitToSurface = () => {\n      let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 / this.context.state.ship.celest_body.atmosphere;\n      console.log('reqDV', requierdDV);\n      let stage = this.burn(requierdDV, true);\n\n      if (stage === false) {\n        console.log('you crashed');\n      } else {\n        console.log('congrats, you landed');\n      } //stage update\n\n\n      this.context.shipSetStage(stage);\n      this.context.updateLocation('ground');\n      updateShip(stage, this.context.state.ship.name, 'ground', this.context.state.ship.celest_body.id, this.context.state.ship.id, 0);\n      console.log('manoeuvre context ', this.context);\n    };\n\n    this.commandModuleReEntry = () => {\n      let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 100;\n      console.log(requierdDV);\n    };\n\n    this.escapeFromOrbit = async () => {\n      let requierdDV = this.context.state.ship.celest_body.escapeVelocity;\n      console.log('reqDV', requierdDV);\n      let stage = this.burn(requierdDV, true);\n\n      if (stage === false) {\n        console.log('you ran out of fuel, you are lost in space');\n      } else {\n        console.log('congrats, you escaped Kerbin system influence, you are now orbiting around the sun');\n      } //stage update\n\n\n      const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id);\n      console.log('celest_body.childrens[0]', celest_body.childrens[0]);\n      this.context.shipSetStage(stage);\n      this.context.updateLocation('orbit', celest_body.childrens[0].id);\n      updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.childrens[0].id, this.context.state.ship.id, celest_body.apoapsis);\n      console.log('manoeuvre context ', this.context);\n    };\n\n    this.childTransfer = () => {\n      let requierdDV;\n      console.log(requierdDV);\n    };\n\n    this.planetTransfert = targetBodyPeriapsis => {\n      let requierdDV = parseInt(Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.altitudeFromParent) * Math.sqrt(Math.pow(2 * targetBodyPeriapsis, 2) / (this.context.state.ship.altitudeFromParent + targetBodyPeriapsis) - 1));\n      console.log(requierdDV);\n    };\n  }\n\n  async componentDidMount() {\n    if (this.context.state.ship.celest_body) {\n      try {\n        const celestBodyRes = await axios({\n          method: 'GET',\n          url: `http://localhost:1337/celest-bodies/`\n        });\n        const fetchedCelestBody = celestBodyRes.data;\n        this.setState({\n          celestBodies: fetchedCelestBody\n        });\n        console.log('fetchedCelestBody', fetchedCelestBody);\n      } catch (e) {\n        alert(e);\n      }\n    }\n  }\n\n  async fromSurfaceToOrbit() {\n    let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 * this.context.state.ship.celest_body.atmosphere;\n    console.log('reqDV', requierdDV);\n    let stage = this.burn(requierdDV, true);\n\n    if (stage === false) {\n      console.log('you ran out of fuel and your rocket crashed');\n    } else {\n      console.log('congrats, you reach orbit');\n    } //stage update\n\n\n    const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id);\n    this.context.shipSetStage(stage);\n    this.context.updateLocation('orbit', celest_body);\n    console.log('celest_body', celest_body); //save to database\n\n    updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.id, this.context.state.ship.id, celest_body.lowOrbit);\n  }\n\n  async getCelestBody(id) {\n    try {\n      const celestBodyRes = await axios({\n        method: 'GET',\n        url: `http://localhost:1337/celest-bodies/${id}`\n      });\n      const fetchedCelestBody = celestBodyRes.data;\n      return fetchedCelestBody;\n    } catch (e) {\n      alert(e);\n    }\n  }\n\n  render() {\n    if (this.context.state.ship.locationStatus === 'orbit') {\n      return /*#__PURE__*/React.createElement(ShipContext.Provider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 24\n        }\n      }, /*#__PURE__*/React.createElement(FromOrbit, {\n        fromOrbitToSurface: this.fromOrbitToSurface,\n        escapeFromOrbit: this.escapeFromOrbit,\n        childTransfer: this.childTransfer,\n        commandModuleReEntry: this.commandModuleReEntry,\n        planetTransfert: targetBodyPeriapsis => this.planetTransfert(targetBodyPeriapsis),\n        celestBodiesList: this.state.celestBodies,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }\n      }));\n    } else if (this.context.state.ship.locationStatus === 'ground') {\n      return /*#__PURE__*/React.createElement(ShipContext.Provider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 24\n        }\n      }, /*#__PURE__*/React.createElement(FromSurface, {\n        fromSurfaceToOrbit: this.fromSurfaceToOrbit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }\n      }));\n    } else {\n      return '';\n    }\n  }\n\n}\nManoeuvreControl.contextType = ShipContext;","map":{"version":3,"sources":["C:/Users/doubl/Documents/Projets/Try/rocketbuilder/frontend/src/components/controls/ManoeuvreControl.js"],"names":["React","Component","ShipContext","updateShip","deleteShip","FromSurface","FromOrbit","axios","ManoeuvreControl","state","celestBodies","burn","requierdDV","risk","stage","context","dvByStageAfterBurn","deltaVByStage","dvbystage","dif","i","length","console","log","splice","push","tank","remainingFuel","ship","id","fromOrbitToSurface","Math","sqrt","celest_body","mu","radius","atmosphere","shipSetStage","updateLocation","name","commandModuleReEntry","escapeFromOrbit","escapeVelocity","getCelestBody","childrens","apoapsis","childTransfer","planetTransfert","targetBodyPeriapsis","parseInt","altitudeFromParent","pow","componentDidMount","celestBodyRes","method","url","fetchedCelestBody","data","setState","e","alert","fromSurfaceToOrbit","lowOrbit","render","locationStatus","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ShipContext } from '../../contexts/ShipProvider'\r\nimport { updateShip } from '../../utils/updateShip'\r\nimport { deleteShip } from '../../utils/deleteShip'\r\nimport FromSurface from './FromSurface'\r\nimport FromOrbit from './FromOrbit'\r\nimport axios from 'axios';\r\n\r\nexport default class ManoeuvreControl extends Component {\r\n    state={\r\n        celestBodies: []\r\n    }\r\n    async componentDidMount() {\r\n        if(this.context.state.ship.celest_body){\r\n        try {\r\n            const celestBodyRes = await axios({\r\n                method: 'GET',\r\n                url: `http://localhost:1337/celest-bodies/`\r\n            })\r\n            const fetchedCelestBody = celestBodyRes.data\r\n            this.setState({celestBodies: fetchedCelestBody})\r\n            console.log('fetchedCelestBody', fetchedCelestBody);\r\n        } catch(e){\r\n            alert(e)\r\n        }}\r\n    }\r\n\r\n    async fromSurfaceToOrbit(){\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 * this.context.state.ship.celest_body.atmosphere\r\n        console.log('reqDV', requierdDV);\r\n        let stage = this.burn(requierdDV, true)\r\n        if(stage === false){\r\n            console.log('you ran out of fuel and your rocket crashed');\r\n        } else {\r\n            console.log('congrats, you reach orbit');\r\n        }\r\n        //stage update\r\n        const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id)\r\n        this.context.shipSetStage(stage)\r\n        this.context.updateLocation('orbit', celest_body)\r\n        \r\n        console.log('celest_body', celest_body);\r\n\r\n        //save to database\r\n        updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.id, this.context.state.ship.id, celest_body.lowOrbit)\r\n    }\r\n\r\n    burn = (requierdDV, risk) => {\r\n        let stage = this.context.state.stage\r\n        let dvByStageAfterBurn = [...this.context.state.deltaVByStage]\r\n        let dvbystage = [...this.context.state.deltaVByStage]\r\n        let dif = []\r\n\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] > requierdDV) {\r\n                dvByStageAfterBurn[i] -= requierdDV\r\n                requierdDV = 0\r\n            } else {\r\n                requierdDV -= dvByStageAfterBurn[i]\r\n                dvByStageAfterBurn[i] = 0\r\n            }\r\n        }\r\n        console.log('dvbystage', dvbystage);\r\n        console.log('dvByStageAfterBurn', dvByStageAfterBurn);\r\n        // stage separation\r\n        for (let i = 0; i < dvByStageAfterBurn.length; i++) {\r\n            if (dvByStageAfterBurn[i] === 0) {\r\n                stage.splice(0, 1)\r\n                dvByStageAfterBurn.splice(0, 1)\r\n                dvbystage.splice(0, 1)\r\n            }\r\n        }\r\n        // getDv % diference\r\n        for (let i = 0; i < dvbystage.length; i++) {\r\n            dif.push(dvByStageAfterBurn[i] / (dvbystage[i] / 100))\r\n        }\r\n        console.log('dif', dif);\r\n        // updateFuelLastStage\r\n        for (let i = 0; i < stage[0].tank.length; i++) {\r\n            stage[0].tank[i].remainingFuel = (stage[0].tank[i].remainingFuel / 100 * dif[0]) / 1.6\r\n        }\r\n        if (requierdDV !== 0) {\r\n            if(risk === true){\r\n                deleteShip(this.context.state.ship.id)\r\n                return false\r\n            }\r\n        }\r\n        return stage\r\n    }\r\n\r\n    fromOrbitToSurface = () => {\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 1000 / this.context.state.ship.celest_body.atmosphere\r\n        console.log('reqDV', requierdDV);\r\n        let stage = this.burn(requierdDV, true)\r\n        if(stage === false){\r\n            console.log('you crashed');\r\n        } else {\r\n            console.log('congrats, you landed');\r\n        }\r\n        //stage update\r\n        this.context.shipSetStage(stage)\r\n        this.context.updateLocation('ground')\r\n        updateShip(stage, this.context.state.ship.name, 'ground', this.context.state.ship.celest_body.id, this.context.state.ship.id, 0)\r\n        console.log('manoeuvre context ', this.context);\r\n    }\r\n\r\n    commandModuleReEntry = () => {\r\n        let requierdDV = Math.sqrt(this.context.state.ship.celest_body.mu / this.context.state.ship.celest_body.radius) * 100 \r\n        console.log(requierdDV)\r\n    }\r\n\r\n    async getCelestBody(id){\r\n        try {\r\n            const celestBodyRes = await axios({\r\n                method: 'GET',\r\n                url: `http://localhost:1337/celest-bodies/${id}`\r\n            })\r\n            const fetchedCelestBody = celestBodyRes.data\r\n            return  fetchedCelestBody\r\n        } catch(e){\r\n            alert(e)\r\n        }\r\n    }\r\n    \r\n     escapeFromOrbit = async () => {\r\n        let requierdDV = this.context.state.ship.celest_body.escapeVelocity\r\n        console.log('reqDV', requierdDV);\r\n        let stage = this.burn(requierdDV, true)\r\n        if(stage === false){\r\n            console.log('you ran out of fuel, you are lost in space');\r\n        } else {\r\n            console.log('congrats, you escaped Kerbin system influence, you are now orbiting around the sun');\r\n        }\r\n\r\n        //stage update\r\n        const celest_body = await this.getCelestBody(this.context.state.ship.celest_body.id)\r\n        console.log('celest_body.childrens[0]', celest_body.childrens[0]);\r\n        this.context.shipSetStage(stage)\r\n        this.context.updateLocation('orbit', celest_body.childrens[0].id)\r\n\r\n        updateShip(stage, this.context.state.ship.name, 'orbit', celest_body.childrens[0].id, this.context.state.ship.id, celest_body.apoapsis)\r\n        console.log('manoeuvre context ', this.context);\r\n    }\r\n\r\n    childTransfer = () => {\r\n        let requierdDV\r\n        console.log(requierdDV)\r\n    }\r\n\r\n    planetTransfert = (targetBodyPeriapsis) => {\r\n        let requierdDV = parseInt(Math.sqrt( this.context.state.ship.celest_body.mu / this.context.state.ship.altitudeFromParent) * (Math.sqrt(Math.pow(2 * targetBodyPeriapsis, 2) / (this.context.state.ship.altitudeFromParent + targetBodyPeriapsis) -1 )))\r\n        console.log(requierdDV);\r\n    }\r\n\r\n    render() {\r\n            if (this.context.state.ship.locationStatus === 'orbit') {\r\n                return <ShipContext.Provider>\r\n                        <FromOrbit\r\n                            fromOrbitToSurface={this.fromOrbitToSurface}\r\n                            escapeFromOrbit={this.escapeFromOrbit}\r\n                            childTransfer={this.childTransfer}\r\n                            commandModuleReEntry={this.commandModuleReEntry}\r\n                            planetTransfert={(targetBodyPeriapsis) => this.planetTransfert(targetBodyPeriapsis)}\r\n                            celestBodiesList={this.state.celestBodies}\r\n                        />\r\n                    </ShipContext.Provider>\r\n            } else if (this.context.state.ship.locationStatus === 'ground') {\r\n                return <ShipContext.Provider>\r\n                        <FromSurface\r\n                            fromSurfaceToOrbit={this.fromSurfaceToOrbit}\r\n                        />\r\n                     </ShipContext.Provider>\r\n            }\r\n        else {\r\n            return ''\r\n        }\r\n    }\r\n}\r\n\r\nManoeuvreControl.contextType = ShipContext;\r\n"]},"metadata":{},"sourceType":"module"}