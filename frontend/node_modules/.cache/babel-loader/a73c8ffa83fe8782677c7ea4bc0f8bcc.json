{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\doubl\\\\Documents\\\\Projets\\\\Try\\\\rocketbuilder\\\\frontend\\\\src\\\\components\\\\controls\\\\ShipControl.js\";\nimport React, { Component } from 'react';\nimport { ShipContext } from '../../contexts/ShipProvider';\nimport axios from 'axios';\nexport default class ShipControl extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ship: null,\n      stage: null,\n      celestialBody: null\n    };\n\n    this.fromSurfaceToOrbit = () => {\n      let stage = this.state.stage;\n      let requierdDV = Math.sqrt(this.state.ship.celest_body.mu / this.state.ship.celest_body.radius) * 1000 * this.state.ship.celest_body.atmosphere;\n      let requierdFuelForDV = this.context.getFuelForDV(requierdDV);\n\n      while (stage.length > 1) {\n        if (stage[0].tank.length > 0) {\n          let currentStage = 0;\n\n          for (let i = 0; i < stage[currentStage].tank.length; i++) {\n            if (requierdFuelForDV >= stage[currentStage].tank[i].remainingFuel) {\n              requierdFuelForDV -= stage[currentStage].tank[i].remainingFuel;\n              stage[currentStage].tank[i].remainingFuel = 0;\n            } else {\n              stage[currentStage].tank[i].remainingFuel -= requierdFuelForDV;\n              requierdFuelForDV = 0;\n              this.context.shipSetStage(stage);\n              console.log('stageAfterBurn', stage);\n              console.log('congratulation you are in orbit');\n              return;\n            }\n          }\n        }\n\n        if (requierdFuelForDV !== 0) {\n          /*--- stage separation ---*/\n          stage.splice(0, 1);\n        }\n      }\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const shiptRes = await axios({\n        method: 'GET',\n        url: `http://localhost:1337/ships/${this.props.location.id}`\n      });\n      const fetchedShip = shiptRes.data;\n      let rocketStages = [];\n\n      for (let i = 0; i < fetchedShip.stage.length; i++) {\n        let stage = {\n          commandModule: [],\n          engine: [],\n          tank: []\n        };\n        let currentStage = i;\n\n        for (let i = 0; i < fetchedShip.stage[currentStage].tank.length; i++) {\n          stage.tank.push(fetchedShip.stage[currentStage].tank[i].tank);\n        }\n\n        for (let i = 0; i < fetchedShip.stage[currentStage].engine.length; i++) {\n          stage.engine.push(fetchedShip.stage[currentStage].engine[i].engine);\n        }\n\n        for (let i = 0; i < fetchedShip.stage[currentStage].commandModule.length; i++) {\n          stage.commandModule.push(fetchedShip.stage[currentStage].commandModule[i].commandModule);\n        }\n\n        currentStage++;\n        rocketStages.push(stage);\n      }\n\n      console.log('rocketStages', rocketStages);\n      this.setState({\n        stage: rocketStages,\n        ship: fetchedShip\n      }, () => {\n        this.context.shipSetStage(rocketStages);\n      });\n      console.log('fetchedShip', fetchedShip);\n    } catch (err) {\n      alert(err);\n    }\n\n    console.log(this.state.ship, this.state.stage);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shipControl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.fromSurfaceToOrbit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, \"go to orbit :\"));\n  }\n\n}\nShipControl.contextType = ShipContext;","map":{"version":3,"sources":["C:/Users/doubl/Documents/Projets/Try/rocketbuilder/frontend/src/components/controls/ShipControl.js"],"names":["React","Component","ShipContext","axios","ShipControl","state","ship","stage","celestialBody","fromSurfaceToOrbit","requierdDV","Math","sqrt","celest_body","mu","radius","atmosphere","requierdFuelForDV","context","getFuelForDV","length","tank","currentStage","i","remainingFuel","shipSetStage","console","log","splice","componentDidMount","shiptRes","method","url","props","location","id","fetchedShip","data","rocketStages","commandModule","engine","push","setState","err","alert","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ShipContext } from '../../contexts/ShipProvider'\r\nimport axios from 'axios';\r\n\r\n\r\nexport default class ShipControl extends Component {\r\n    state ={\r\n        ship: null,\r\n        stage: null,\r\n        celestialBody: null\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const shiptRes = await axios({\r\n                method: 'GET',\r\n                url: `http://localhost:1337/ships/${this.props.location.id}`\r\n            });\r\n            const fetchedShip = shiptRes.data\r\n            let rocketStages = []\r\n            for (let i = 0; i < fetchedShip.stage.length; i++) {\r\n                let stage = {\r\n                    commandModule: [],\r\n                    engine: [],\r\n                    tank: [],\r\n                }\r\n                let currentStage = i\r\n                for (let i = 0; i < fetchedShip.stage[currentStage].tank.length; i++) {\r\n                    stage.tank.push(fetchedShip.stage[currentStage].tank[i].tank)\r\n                }\r\n                for (let i = 0; i < fetchedShip.stage[currentStage].engine.length; i++) {\r\n                    stage.engine.push(fetchedShip.stage[currentStage].engine[i].engine)\r\n                }\r\n                for (let i = 0; i < fetchedShip.stage[currentStage].commandModule.length; i++) {\r\n                    stage.commandModule.push(fetchedShip.stage[currentStage].commandModule[i].commandModule)\r\n                }\r\n                currentStage++\r\n                rocketStages.push(stage)\r\n            }\r\n            console.log('rocketStages', rocketStages);\r\n            this.setState({ \r\n                stage: rocketStages,\r\n                ship: fetchedShip\r\n            }, () => {\r\n                this.context.shipSetStage(rocketStages)\r\n            })\r\n            console.log('fetchedShip', fetchedShip)\r\n        } catch (err){\r\n            alert(err);\r\n        }\r\n        console.log(this.state.ship, this.state.stage);\r\n    }\r\n\r\n    fromSurfaceToOrbit = () => {\r\n        let stage = this.state.stage\r\n        let requierdDV = Math.sqrt(this.state.ship.celest_body.mu/this.state.ship.celest_body.radius) * 1000 * this.state.ship.celest_body.atmosphere\r\n        let requierdFuelForDV = this.context.getFuelForDV(requierdDV)\r\n        while (stage.length > 1) {\r\n            if (stage[0].tank.length > 0) {\r\n                let currentStage = 0\r\n                for (let i = 0; i < stage[currentStage].tank.length; i++) {\r\n                    if (requierdFuelForDV >= stage[currentStage].tank[i].remainingFuel){\r\n                        requierdFuelForDV -= stage[currentStage].tank[i].remainingFuel\r\n                        stage[currentStage].tank[i].remainingFuel = 0\r\n                    } else {\r\n                        stage[currentStage].tank[i].remainingFuel -= requierdFuelForDV\r\n                        requierdFuelForDV = 0\r\n                        this.context.shipSetStage(stage)\r\n                        console.log('stageAfterBurn', stage);\r\n                        console.log('congratulation you are in orbit');\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n            if(requierdFuelForDV !== 0){\r\n                /*--- stage separation ---*/\r\n                stage.splice(0, 1)\r\n            } \r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"shipControl\">\r\n                <button onClick={() => this.fromSurfaceToOrbit()}>go to orbit :</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nShipControl.contextType = ShipContext;\r\n"]},"metadata":{},"sourceType":"module"}